<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_para_scripting_1_1_para_object" kind="class" language="C++" prot="public">
    <compoundname>ParaScripting::ParaObject</compoundname>
    <includes refid="_para_scripting_scene_8h" local="no">ParaScriptingScene.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_para_scripting_1_1_para_object_1a9b42c0c2de5e8b8dc6cc33988cc3bd7d" prot="public" static="no" mutable="no">
        <type>CBaseObject::WeakPtr_type</type>
        <definition>CBaseObject::WeakPtr_type ParaScripting::ParaObject::m_pObj</definition>
        <argsstring></argsstring>
        <name>m_pObj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="59" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1afeba29bdc07382139a8fbb5146433507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ParaScripting::ParaObject::ParaObject</definition>
        <argsstring>()</argsstring>
        <name>ParaObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="61" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3ffc9a598a8e02d33c358625a795572a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ParaScripting::ParaObject::ParaObject</definition>
        <argsstring>(CBaseObject *pObj)</argsstring>
        <name>ParaObject</name>
        <param>
          <type>CBaseObject *</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="62" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a31b43e1b046e5bf44a301c7843b8862b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ParaScripting::ParaObject::~ParaObject</definition>
        <argsstring>()</argsstring>
        <name>~ParaObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="63" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8d69c9820c76a30bcf8edf1c0855d937" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CBaseObject *</type>
        <definition>CBaseObject* ParaScripting::ParaObject::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="65" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9635c9749259ee50ea83b55802fbb5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetType</definition>
        <argsstring>()</argsstring>
        <name>GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the Runtime class information of the object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="70" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a84efae73b7b8cc2e593d8c4a84c7c6ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetMyType</definition>
        <argsstring>() const</argsstring>
        <name>GetMyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get paraengine defined object type name. TODO: This function is not implemented </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="74" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a20fb50d8893f7e3182e196d7c7c6c0e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetID</definition>
        <argsstring>()</argsstring>
        <name>GetID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the ID of the object. The ID of the object is only generated when the first time this function is called. One can then easily get the object, by calling ParaScene.GetObject(nID). When an object is released, its ID is not longer used. Please note that we can ParaScene.GetObject(nID) even if the object is never attached before. Please note that the ID is neither unique outside the world, nor persistent in the same world. <simplesect kind="return"><para>: return 0 if object is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="82" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a197d7eb4798570096319e6fa5d392413" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if the object is valid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="87" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a5d38b4fb6f83d61c95f9fb4dec0d6e5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsAttached</definition>
        <argsstring>() const</argsstring>
        <name>IsAttached</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object has been attached to the scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="89" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="302" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ad74b98cacb87efcb767af45d772f5b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaScripting::ParaObject::GetPrimaryAsset</definition>
        <argsstring>()</argsstring>
        <name>GetPrimaryAsset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the main asset object associated with this object. the object may be invalid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="92" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1abe05c07ffd1f6f93c30f78f19db70a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetPrimaryAsset_</definition>
        <argsstring>(ParaAssetObject *pOut)</argsstring>
        <name>GetPrimaryAsset_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> *</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. this is solely for exporting API. and should not be used from the scripting interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="94" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af8d508babe8ab892189613f34e66f82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_param_block" kindref="compound">ParaParamBlock</ref></type>
        <definition>ParaScripting::ParaParamBlock ParaScripting::ParaObject::GetEffectParamBlock</definition>
        <argsstring>()</argsstring>
        <name>GetEffectParamBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the parameter block of the effect (shader) associated with this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="97" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1390" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ac98b9fb54ae1d133a5d24ab94b0986ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsPersistent</definition>
        <argsstring>()</argsstring>
        <name>IsPersistent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object is persistent in the world. If an object is persistent, it will be saved to the world&apos;s database. if it is not persistent it will not be saved when the world closes. Player, OPC, some temporary movie actors may by non-persistent; whereas NPC are usually persistent to the world that it belongs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="102" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="919" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af38d8708c1cfc2439907b6b2179ed632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPersistent</definition>
        <argsstring>(bool bPersistent)</argsstring>
        <name>SetPersistent</name>
        <param>
          <type>bool</type>
          <declname>bPersistent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_object_1ac98b9fb54ae1d133a5d24ab94b0986ee" kindref="member">IsPersistent()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="105" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="930" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab309488f661e3c65963ad7d44e8a2b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::SaveToDB</definition>
        <argsstring>()</argsstring>
        <name>SaveToDB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save the current character to database according to the persistent property. if the object is persistent, the action is to update or insert the character to db if the object is non-persistent, the action is to delete it from the database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="110" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="967" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a38069bd89c6eb3154e9a4fe6a54269e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::equals</definition>
        <argsstring>(const ParaObject obj) const</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return true, if this object is the same as the given object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="115" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a786a3b50672aea527292f0f55675ffba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>convert the object to object creation string. <simplesect kind="return"><para>: &quot;&quot; if not valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="119" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a6492e6b2524c858ee8cf8d5923451b46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::ToString1</definition>
        <argsstring>(const char *sMethod) const</argsstring>
        <name>ToString1</name>
        <param>
          <type>const char *</type>
          <declname>sMethod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>convert the object to string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sMethod</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be one of the following strings &quot;create&quot;: generate script to create the object &quot;update&quot;: generate script to update the object, useful for updating static physics object &quot;delete&quot;: generate script to delete the object &quot;loader&quot;: generate script to create the object in managed loader </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: &quot;&quot; if not valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="128" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="177" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af89fe292cb8f53af915efa9e2fbeb0a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaObject::GetAttributeObject</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with an object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="131" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1acd812099f4f201b5290d5caab6fbee29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetAttributeObject_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObject_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for API exportation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="133" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a81887ff5a3fdb3b1043cc2a8eb31c44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::CheckLoadPhysics</definition>
        <argsstring>()</argsstring>
        <name>CheckLoadPhysics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when this function is called, it ensures that the physics object around this object is properly loaded. It increases the hit count of these physics objects by 1. The garbage collector in the physics world may use the hit count to move out unused static physics object from the physics scene (Novodex). This function might be called for the current player, each active mobile object in the scene and the camera eye position. vCenter: the center of the object in world coordinates fRadius: the radius of the object within which all physics object must be active. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="142" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="321" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a655f3b7a9594273dcb16e59285786309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::LoadPhysics</definition>
        <argsstring>()</argsstring>
        <name>LoadPhysics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only load physics of this object if it has not loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="145" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="330" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a5948f577037be5b23231308f85b2d555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object</type>
        <definition>luabind::object ParaScripting::ParaObject::GetField</definition>
        <argsstring>(const char *sFieldname, const object &amp;output)</argsstring>
        <name>GetField</name>
        <param>
          <type>const char *</type>
          <declname>sFieldname</declname>
        </param>
        <param>
          <type>const object &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get field by name. e.g. suppose att is the attribute object. local bGloble = att:GetField(&quot;global&quot;, true); local facing = att:GetField(&quot;facing&quot;, 0); local pos = att:GetField(&quot;position&quot;, {0,0,0}); pos[1] = pos[1]+100;pos[2] = 0;pos[3] = 10;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFieldname</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>default value. if field type is vectorN, output is a table with N items. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the field result. If field not found, output will be returned. if field type is vectorN, return a table with N items.Please note table index start from 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="159" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1471" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a7e4b00c265a9e260ed718caeee88ea89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetField</definition>
        <argsstring>(const char *sFieldname, const object &amp;input)</argsstring>
        <name>SetField</name>
        <param>
          <type>const char *</type>
          <declname>sFieldname</declname>
        </param>
        <param>
          <type>const object &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set field by name e.g. suppose att is the attribute object. att:SetField(&quot;facing&quot;, 3.14); att:SetField(&quot;position&quot;, {100,0,0}); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFieldname</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input value. if field type is vectorN, input is a table with N items. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="167" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1477" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a54cea37ad7f35b76c680af89e746782d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::CallField</definition>
        <argsstring>(const char *sFieldname)</argsstring>
        <name>CallField</name>
        <param>
          <type>const char *</type>
          <declname>sFieldname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>call field by name. This function is only valid when The field type is void. It simply calls the function associated with the field name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="171" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1483" bodyend="1487"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a40ca121fcb5902d724b54f0651e49ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object</type>
        <definition>luabind::object ParaScripting::ParaObject::GetDynamicField</definition>
        <argsstring>(const char *sFieldname, const object &amp;output)</argsstring>
        <name>GetDynamicField</name>
        <param>
          <type>const char *</type>
          <declname>sFieldname</declname>
        </param>
        <param>
          <type>const object &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get field by name. e.g. suppose att is the attribute object. local bGloble = att:GetField(&quot;URL&quot;, nil); local facing = att:GetField(&quot;Title&quot;, &quot;default one&quot;);</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFieldname</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>default value. if field type is vectorN, output is a table with N items. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the field result. If field not found, output will be returned. if field type is vectorN, return a table with N items.Please note table index start from 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="183" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1489" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1abb55a96ae779817363ece0406661b5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetDynamicField</definition>
        <argsstring>(const char *sFieldname, const object &amp;input)</argsstring>
        <name>SetDynamicField</name>
        <param>
          <type>const char *</type>
          <declname>sFieldname</declname>
        </param>
        <param>
          <type>const object &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set field by name e.g. suppose att is the attribute object. att:SetDynamicField(&quot;URL&quot;, 3.14); att:SetDynamicField(&quot;Title&quot;, {100,0,0}); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFieldname</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input value. can be value or string type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="191" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1495" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a315dd5625007e7218184b9b07c737969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaObject::GetObject</definition>
        <argsstring>(const char *name)</argsstring>
        <name>GetObject</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get object by name, if there are multiple objects with the same name, the last added one is inserted. <simplesect kind="note"><para>: This function will traverse the scene to search the object. So there might be some performance penalty. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="197" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1501" bodyend="1509"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a199ab949d755f87755c1f105ed61da33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsStanding</definition>
        <argsstring>()</argsstring>
        <name>IsStanding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object has 0 speed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="201" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1251" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab3683becc5a8e2913942db36f13695db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsVisible</definition>
        <argsstring>()</argsstring>
        <name>IsVisible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>invisible object will not be drawn. e.g. one can turn off the visibility of physics object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="204" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1260" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a2b720f3f8e91401eae487dd0dd544806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetVisible</definition>
        <argsstring>(bool bVisible)</argsstring>
        <name>SetVisible</name>
        <param>
          <type>bool</type>
          <declname>bVisible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the visibility of this object. The visibility will recursively affect all its child objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="207" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1269" bodyend="1275"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9a883da2a8d71ecf59ab40749037122b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::CheckAttribute</definition>
        <argsstring>(DWORD attribute)</argsstring>
        <name>CheckAttribute</name>
        <param>
          <type>DWORD</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether an object attribute is enabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>object volume bit fields enum OBJECT_ATTRIBUTE { / two solid objects with sensor volume will cause environment simulator to / to generate sensor/collision event when they come in to contact. OBJ_VOLUMN_SENSOR = 1, / all child objects are in this object&apos;s volume OBJ_VOLUMN_CONTAINER = 0x1&lt;&lt;1, / solid objects(like biped) can be placed on its volume, provided / it&apos;s not already occupied by any solid objects from its children / when we solve two solid object collision, this is the field we check first. OBJ_VOLUMN_FREESPACE = 0x1&lt;&lt;2, / whether the object is isolated from its siblings. An isolated object / can overlap in physical space with all its siblings regardless of their solidity. / multiple scenes or terrains can be declared as ISOLATED object. Note, the object / is not isolated from its parent, though. OBJ_VOLUMN_ISOLATED = 0x1&lt;&lt;3, / the object has a perceptive radius that may be larger than the object&apos;s / collision radius. Currently only biped object might has this volume type OBJ_VOLUMN_PERCEPTIVE_RADIUS = 0x1&lt;&lt;4, / objects with this VIP volume type will trigger the plot of the scene in its view-culling radius. OBJ_VOLUMN_VIP = 0x1&lt;&lt;5, / Object invisible, the object is not drawn.but its physics may load. added by lxz 2006.3.5 OBJ_VOLUMN_INVISIBLE = 0x1&lt;&lt;6, / mask of the above bits. this field is never used externally. VOLUMN_MASK = 0x7f, / whether lights have effects on this object. MESH_USE_LIGHT = 0x1&lt;&lt;7, / whether to rotate the object around Y axis to let the object always facing the camera. MESH_BILLBOARDED= 0x1&lt;&lt;8, / whether it is a shadow receiver. MESH_SHADOW_RECEIVER= 0x1&lt;&lt;9, / whether it is a vegetation. MESH_VEGETATION= 0x1&lt;&lt;10, }; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="249" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1277" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a40cfd9957cc7b58c98bca9e85048d9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetAttribute</definition>
        <argsstring>(DWORD dwAtt, bool bTurnOn)</argsstring>
        <name>SetAttribute</name>
        <param>
          <type>DWORD</type>
          <declname>dwAtt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bTurnOn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enable or disable a given attribute.</para><para>Below are some attributes. For more information please see BaseObject.h</para><para>/ two solid objects with sensor volume will cause environment simulator to / to generate sensor/collision event when they come in to contact. OBJ_VOLUMN_SENSOR = 1, / all child objects are in this object&apos;s volume OBJ_VOLUMN_CONTAINER = 0x1&lt;&lt;1, / solid objects(like biped) can be placed on its volume, provided / it&apos;s not already occupied by any solid objects from its children / when we solve two solid object collision, this is the field we check first. OBJ_VOLUMN_FREESPACE = 0x1&lt;&lt;2, / whether the object is isolated from its siblings. An isolated object / can overlap in physical space with all its siblings regardless of their solidity. / multiple scenes or terrains can be declared as ISOLATED object. Note, the object / is not isolated from its parent, though. OBJ_VOLUMN_ISOLATED = 0x1&lt;&lt;3, / the object has a perceptive radius that may be larger than the object&apos;s / collision radius. Currently only biped object might has this volume type OBJ_VOLUMN_PERCEPTIVE_RADIUS = 0x1&lt;&lt;4, / objects with this VIP volume type will trigger the plot of the scene in its view-culling radius. OBJ_VOLUMN_VIP = 0x1&lt;&lt;5, / Object invisible, the object is not drawn.but its physics may load. added by lxz 2006.3.5 OBJ_VOLUMN_INVISIBLE = 0x1&lt;&lt;6,</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwAtt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bTurnOn</parametername>
</parameternamelist>
<parameterdescription>
<para>true to turn on, false to turn off. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="281" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1286" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ac8b76a69701cd8eb26d31f64bf29f8f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPosition</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>SetPosition</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set world position. Please note, for static object, it may make the quad tree terrain in which the object is located invalid. it may also make the physics engine panic.In such cases, one should call <ref refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" kindref="member">ParaScene.Attach()</ref> after chancing the position or rotation of a static mesh or physics object. If any of the following rule matches, the function is safe to use.<itemizedlist>
<listitem><para>Use this function for global biped if (x,y,z) changes.</para></listitem><listitem><para>Use this function for all objects if it has not been attached to the global terrain</para></listitem><listitem><para>Use this function for static mesh, with (0,y,0) only.i.e. only changing height.</para></listitem><listitem><para>Never use this function for physics object, unless you are building the world. If you do use it it with physics or static mesh object, make sure that you follow the following rules: <ndash/> create the physics object and save it in a global variable called physicsObj. physicsObj = ParaScene.Attach(physicsObj); <ndash/> attach the physics object to the scene <ndash/> modification of the position, orientation, scaling of the object occurred. local x,y,z = physicsObj:<ref refid="class_para_scripting_1_1_para_object_1a88cd8c013ef66684fb3507d624c2b5e3" kindref="member">GetPosition()</ref>; physicsObj:SetPosition(x+2,y,z); <ndash/> immediately call Attach again with physicsObj, so that the physical scene will be updated and the object be re-inserted properly in to the scene. physicsObj = ParaScene.Attach(physicsObj); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>global x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>global y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>global z </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>since the object has moved, we may need to update its location in the scene graph we only do this for static object.</para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="303" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="339" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a88cd8c013ef66684fb3507d624c2b5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetPosition</definition>
        <argsstring>(double *x, double *y, double *z)</argsstring>
        <name>GetPosition</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the world position of the object. This function takes no parameters. x,y,z are not input, but pure output. In the script, we can call it as below x,y,z = biped:<ref refid="class_para_scripting_1_1_para_object_1a88cd8c013ef66684fb3507d624c2b5e3" kindref="member">GetPosition()</ref>; <ndash/> get the biped&apos;s position in Luabind, it is defined as .def(&quot;GetPosition&quot;, &amp;<ref refid="class_para_scripting_1_1_para_object_1a88cd8c013ef66684fb3507d624c2b5e3" kindref="member">ParaObject::GetPosition</ref>, pure_out_value(_2) + pure_out_value(_3) + pure_out_value(_4)) please note, y is the absolute position in world coordinate <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_object_1ac8b76a69701cd8eb26d31f64bf29f8f0" kindref="member">SetPosition(double x, double y, double z)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="313" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="362" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3b2bd2b438d740195566e5f5b3d70f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetViewCenter</definition>
        <argsstring>(double *x, double *y, double *z)</argsstring>
        <name>GetViewCenter</name>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the world position of the center of the view object. This function takes no parameters. x,y,z are not input, but pure output. In the script, we can call it as below x,y,z = biped:<ref refid="class_para_scripting_1_1_para_object_1a3b2bd2b438d740195566e5f5b3d70f93" kindref="member">GetViewCenter()</ref>; <ndash/> get the biped&apos;s center </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="319" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="376" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ae61b37c9ec9101a59383b39753aab8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::OffsetPosition</definition>
        <argsstring>(float dx, float dy, float dz)</argsstring>
        <name>OffsetPosition</name>
        <param>
          <type>float</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>offset the current object position by (dx,dy,dz) <simplesect kind="see"><para>SetPosition(float x, float y, float z) for precautions of using this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="325" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="475" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a48f35e380f28a30be79d8c2c8ede11ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetFacing</definition>
        <argsstring>(float fFacing)</argsstring>
        <name>SetFacing</name>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set object facing around the Y axis. this function is safe to call for all kind of objects except the physics mesh object. for physics mesh object, one must call <ref refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" kindref="member">ParaScene.Attach()</ref> immediately after this function. for more information, please see SetPostion(); <simplesect kind="see"><para>: SetPostion(); </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="332" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1acfea56f028d54f0759116b999dd8659d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetFacing</definition>
        <argsstring>()</argsstring>
        <name>GetFacing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get object facing around the Y axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="334" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="550" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1adf250b11b2e29e4100c53cf2849728be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::Rotate</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>Rotate</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate the object.This only takes effects on objects having 3D orientation, such as static mesh and physics mesh. The orientation is computed in the following way: first rotate around x axis, then around y, finally z axis. Note: this function is safe to call for all kind of objects except the physics mesh object. for physics mesh object, one must call <ref refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" kindref="member">ParaScene.Attach()</ref> immediately after this function. for more information, please see SetPostion(); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation around the x axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation around the y axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation around the z axis. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>: SetPostion(); </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="347" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab155d5846420ab8808df5632abdf5a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::Scale</definition>
        <argsstring>(float s)</argsstring>
        <name>Scale</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the scale of the object. This function takes effects on both character object and mesh object. Note: this function is safe to call for all kind of objects except the physics mesh object. for physics mesh object, one must call <ref refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" kindref="member">ParaScene.Attach()</ref> immediately after this function. for more information, please see SetPostion(); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a relative scale to its current size. Scaling applied to all axis.1.0 means original size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>: SetPostion(); </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="356" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="462" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ac4913f7001a1e8421912ac8a953ca842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetScaling</definition>
        <argsstring>(float s)</argsstring>
        <name>SetScaling</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="357" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3f48a3ee63d1c7bdc0195a94d841568b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetScale</definition>
        <argsstring>()</argsstring>
        <name>GetScale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the scale of the object. This function takes effects on both character object and mesh object. Note: this function is safe to call for all kind of objects except the physics mesh object. for physics mesh object, one must call <ref refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" kindref="member">ParaScene.Attach()</ref> immediately after this function. for more information, please see SetPostion(); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>this is the absolute scale on the original mesh model. Scaling applied to all axis.1.0 means original size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="365" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="483" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1abd01eb72c1b03404209a0d4ca09780f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetScale</definition>
        <argsstring>(float s)</argsstring>
        <name>SetScale</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set scale <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_object_1a3f48a3ee63d1c7bdc0195a94d841568b" kindref="member">GetScale()</ref>; </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="370" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="492" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab14459d81fbb461157850861b4d74c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object</type>
        <definition>object ParaScripting::ParaObject::GetRotation</definition>
        <argsstring>(const object &amp;quat)</argsstring>
        <name>GetRotation</name>
        <param>
          <type>const object &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this usually applies only to mesh object. get the rotation as quaternion. e.g. local mat3x3 = obj:GetRotation({}); <simplesect kind="return"><para>the rotational matrix is of the following format: {x,y,z,w,} </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="377" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="500" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8b2825b826561cffc279b98d8fbe1f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetRotation</definition>
        <argsstring>(const object &amp;quat)</argsstring>
        <name>SetRotation</name>
        <param>
          <type>const object &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the rotation as quaternion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sRot</parametername>
</parameternamelist>
<parameterdescription>
<para>the rotational matrix is of the following format: {x,y,z,w,} </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="383" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="514" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a663993b1a6f8833791262a953dc85920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reset the object to its default settings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="386" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="453" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a5b1c5c52cb9a3c11f8e84136041e06b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPhysicsGroup</definition>
        <argsstring>(int nGroup)</argsstring>
        <name>SetPhysicsGroup</name>
        <param>
          <type>int</type>
          <declname>nGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the physics group ID to which this object belongs to default to 0, must be smaller than 32. please see groups Mask used to filter shape objects. See #NxShape::setGroup<itemizedlist>
<listitem><para>group 0 means physics object that will block the camera and player, such as building walls, big tree trunks, etc.</para></listitem><listitem><para>group 1 means physics object that will block the player, but not the camera, such as small stones, thin posts, trees, etc. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="394" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1436" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a95cd72ec7761fa5ed2b56ee14a2710e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetPhysicsGroup</definition>
        <argsstring>()</argsstring>
        <name>GetPhysicsGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the physics group ID to which this object belongs to default to 0, must be smaller than 32. please see groups Mask used to filter shape objects. See #NxShape::setGroup<itemizedlist>
<listitem><para>group 0 means physics object that will block the camera and player, such as building walls, big tree trunks, etc.</para></listitem><listitem><para>group 1 means physics object that will block the player, but not the camera, such as small stones, thin posts, trees, etc. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="402" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1444" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a1db03494d4bb3ca41fddb84cc9b02558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetSelectGroupIndex</definition>
        <argsstring>(int nGroupIndex)</argsstring>
        <name>SetSelectGroupIndex</name>
        <param>
          <type>int</type>
          <declname>nGroupIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the selection group index. if -1, it means that it was not selected. this function is equivalent to calling ParaSelection.AddObject(obj, nGroupID); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nGroupIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>selection group index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="409" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1453" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a361560321ac40b08c63acc54195cb25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetSelectGroupIndex</definition>
        <argsstring>()</argsstring>
        <name>GetSelectGroupIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the selection group index. if -1, it means that it was not selected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="412" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1462" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a5f806ed414b8db46589dcbd7eaeaf39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetDensity</definition>
        <argsstring>(float fDensity)</argsstring>
        <name>SetDensity</name>
        <param>
          <type>float</type>
          <declname>fDensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>body density. The water density is always 1.0 in the game engine. So if it is above 1.0, it will sink in water; otherwise it will float on water surface. So if it is below 0.5, it will fly or glind in air falling down with little gravity; otherwise it will fall down with full gravity. A density of 0 or negative, means that the character can fly. The default value is 1.2. the following are some examples<itemizedlist>
<listitem><para>character: body density: 1.2</para></listitem><listitem><para>car: body density: 2.0 mount target</para></listitem><listitem><para>ship: body density: 0.8 mount target</para></listitem><listitem><para>plane: body density: 0.4 mount target <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fDensity</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="424" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="430" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ac4a14fda646111e3d7fb29580c936878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetDensity</definition>
        <argsstring>()</argsstring>
        <name>GetDensity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get body density </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="426" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="438" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a24335694bb4bc46eba5e112ead94c6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetPhysicsRadius</definition>
        <argsstring>()</argsstring>
        <name>GetPhysicsRadius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the biped is modeled as a cylinder or sphere during rough physics calculation. this function returns the radius of the cylinder or sphere. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="430" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="388" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a5384199b74a390800bc46011ac008cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPhysicsRadius</definition>
        <argsstring>(float fR)</argsstring>
        <name>SetPhysicsRadius</name>
        <param>
          <type>float</type>
          <declname>fR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the biped is modeled as a cylinder or sphere during rough physics calculation. this function set the radius of the cylinder or sphere. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="433" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="401" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a76552790e63d6044dedfde7417c33771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetPhysicsHeight</definition>
        <argsstring>()</argsstring>
        <name>GetPhysicsHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the biped is modeled as a cylinder or sphere during rough physics calculation. this function returns the height of the cylinder or sphere. this value will also restrict the biped&apos;s vertical movement. if there is no head attachment, the GetPhysicsHeight is used for character head on text position instead. If PhysicsHeight is never set, it is always 4*PhysicsRadius. However, if it is set, its value are maintained. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="441" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="413" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a85b0b7d576e04cfe03a340cd78a6f025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPhysicsHeight</definition>
        <argsstring>(float fHeight)</argsstring>
        <name>SetPhysicsHeight</name>
        <param>
          <type>float</type>
          <declname>fHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the biped is modeled as a cylinder or sphere during rough physics calculation. this function set the height of the cylinder or sphere. this value will also restrict the biped&apos;s vertical movement. if there is no head attachment, the GetPhysicsHeight is used for character head on text position instead. If PhysicsHeight is never set, it is always 4*PhysicsRadius. However, if it is set, its value are maintained. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="449" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="422" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1adffa045b187a9debfc8924e6df8c478a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the object name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="452" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="555" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a4426b9584d0b0694f5d24613a64fb344" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetName_</definition>
        <argsstring>() const</argsstring>
        <name>GetName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for .NET API use only.not thread safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="454" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="560" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3f04234bfafe12a31503725d1e1d97b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetName</definition>
        <argsstring>(const char *sName)</argsstring>
        <name>SetName</name>
        <param>
          <type>const char *</type>
          <declname>sName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the object name <simplesect kind="remark"><para>: currently, renaming an object after attaching it to the scene is dangerous, because when people use the <ref refid="class_para_scripting_1_1_para_scene_1a16a79f61e5e0190660db0c3d3cae2195" kindref="member">ParaScene.GetObject()</ref>, it may return a renamed and deleted object. The good practice is that never change an object&apos;s name when it is attached to the scene. </para></simplesect>
<simplesect kind="remark"><para>: In version 0.9 or above, renaming an object will detach the object from the scene and then reattach it to the scene using the new name; so it works fine when changing object name after attachment. </para></simplesect>
<simplesect kind="remark"><para>: this function will not take effect, if the object can not be renamed, such as due to another global object with the same name. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sName</parametername>
</parameternamelist>
<parameterdescription>
<para>new name of the object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="464" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="567" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a455590f45600d036769547c84d7f630b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SnapToTerrainSurface</definition>
        <argsstring>(int bUseNorm)</argsstring>
        <name>SnapToTerrainSurface</name>
        <param>
          <type>int</type>
          <declname>bUseNorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>snap to terrain surface. Such as landscape trees, stones, etc. set bUseNorm to 1, if you want the norm to be aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="470" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a1a009a2720a1da767c2e8cb235d5bf5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsCharacter</definition>
        <argsstring>() const</argsstring>
        <name>IsCharacter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return true if object is a character(biped) object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="474" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="604" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9ccb8e29e0ef0fbc7497d301ad3015d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsOPC</definition>
        <argsstring>() const</argsstring>
        <name>IsOPC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return true if object is a network player </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="478" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="609" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aac26dfa773ed793946f5723b981259a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_character" kindref="compound">ParaCharacter</ref></type>
        <definition>ParaCharacter ParaScripting::ParaObject::ToCharacter</definition>
        <argsstring>()</argsstring>
        <name>ToCharacter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the <ref refid="class_para_scripting_1_1_para_character" kindref="compound">ParaCharacter</ref> object, if this object is a biped typed scene object. the <ref refid="class_para_scripting_1_1_para_character" kindref="compound">ParaCharacter</ref> interface offers more specific functions to control the behavior and appearance of the character object. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_character" kindref="compound">ParaCharacter</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="486" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af68bc53681ea2b5ab0546e720d169234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IGameObject *</type>
        <definition>IGameObject * ParaScripting::ParaObject::ToGameObject</definition>
        <argsstring>()</argsstring>
        <name>ToGameObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>convert to game object. This function may return NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="491" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="285" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3149571ad6ca1dff2105c6871e858632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::AddEvent</definition>
        <argsstring>(const char *strEvent, int nEventType, bool bIsUnique)</argsstring>
        <name>AddEvent</name>
        <param>
          <type>const char *</type>
          <declname>strEvent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nEventType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsUnique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add events to object to control the object, please refer to HLE for object event specifications. Generally, one can use event to tell a biped to walk to a new position play a certain animation, speak some words, follow another biped, attack, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>currently a biped object accepts the following events. A list of events (more will be coming in future release):<linebreak/>
<itemizedlist>
<listitem><para>&quot;stop&quot;<linebreak/>
 Stop the biped</para></listitem><listitem><para>&quot;walk x y&quot;<linebreak/>
 Walk to (x,y) using the default animation</para></listitem><listitem><para>&quot;colr r, g, b&quot;<linebreak/>
 Set model color[0, 1]<linebreak/>
 e.g. colr 1.0 0 0 = to set red color</para></listitem><listitem><para>&quot;anim string | number&quot;<linebreak/>
 Play animation</para></listitem><listitem><para>&quot;asai type parameters&quot;<linebreak/>
 Assign AI module of type type to the biped. Old modules are discarded Currently only support creature type AI module, with one parameter which can be ranged or melee unit.<linebreak/>
 type:<linebreak/>
 AIModuleCreatures=1, // respawning creatures that may be neural,or aggressive. They will not attack bipeds of any type, but may attack any team bipeds.<linebreak/>
 AIModuleTeam=2, // Player Controllable biped AI module. it recognize creatures and members in other teams by their IDs.<linebreak/>
 &quot;asai 1 1&quot; Assign creature AI with ranged unit attribute<linebreak/>
 &quot;asai 1 0&quot; Assign creature AI with melee unit attribute<linebreak/>
</para></listitem><listitem><para>&quot;ClearAll&quot;<linebreak/>
 Clear all tasks that this biped is assigned.</para></listitem><listitem><para>&quot;task  taskType parameters&quot;<linebreak/>
 Assign task to the AImodule associated with the biped.<linebreak/>
 taskType: <linebreak/>
 Currently taskType should be string, not their number<linebreak/>
<itemizedlist>
<listitem><para>DieAndReborn = 0,</para></listitem><listitem><para>WanderNearby = 1,</para></listitem><listitem><para>Evade=2, &quot;task Evade name&quot;<linebreak/>
 name: which biped to evade<linebreak/>
 e.g. &quot;task Evade enemy1&quot;</para></listitem><listitem><para>Follow=3, &quot;task Follow name&quot;<linebreak/>
 name: which biped to follow<linebreak/>
 e.g. &quot;task Follow LiXizhi&quot;</para></listitem><listitem><para>Movie=4, &quot;task Movie string&quot;<linebreak/>
 string: list of key, no spaces in the str are allowed. Format is given below<linebreak/>
 [&lt;const char* anim, float x, float y, float z, float facing, float duration&gt;]+ <linebreak/>
 If y=0, then the height of the position is ignored. Duration is in seconds.<linebreak/>
 e.g. &quot;task Movie &lt;attack-1,50,0,60,0,10&gt;&lt;Die-1,50,0,60,0,0&gt;&quot; </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nEventType</parametername>
</parameternamelist>
<parameterdescription>
<para>default to 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bIsUnique</parametername>
</parameternamelist>
<parameterdescription>
<para>is it unique by string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="544" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="294" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a610af924c795391f53fe6edef1cb7538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::AddChild</definition>
        <argsstring>(const ParaObject obj)</argsstring>
        <name>AddChild</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>attach the object as its child object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the child object to attach </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="550" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a72a34f5e698e0cef6a2f770820bda131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::EnablePhysics</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnablePhysics</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if this is a physics mesh object, this function will turn on or off the physics of the object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="553" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="622" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ada3d2704acbea283d49cbd4c70c35632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsPhysicsEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsPhysicsEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this is a physics mesh object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="556" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="629" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8e9d99229c9daccf2b6f9f73eaca143d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::DistanceTo</definition>
        <argsstring>(ParaObject obj)</argsstring>
        <name>DistanceTo</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the distance with another object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="559" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="229" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9f5cc34ff3ba846f3e4faa8ab97ec3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::DistanceToSq</definition>
        <argsstring>(ParaObject obj)</argsstring>
        <name>DistanceToSq</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the distance square with another object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="561" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="243" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ad87cc06b927fe0f19dd10a72fcb6bd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::DistanceToPlayerSq</definition>
        <argsstring>()</argsstring>
        <name>DistanceToPlayerSq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the distance square with the current player object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="563" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="255" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a12c11c0b56ee6453b4f193c9317cfdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::DistanceToCameraSq</definition>
        <argsstring>()</argsstring>
        <name>DistanceToCameraSq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the distance square with the camera object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="565" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="270" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a535b56ebd96202c89d659e0e24d4e245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object</type>
        <definition>object ParaScripting::ParaObject::GetViewBox</definition>
        <argsstring>(const object &amp;output)</argsstring>
        <name>GetViewBox</name>
        <param>
          <type>const object &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the view box. e.g. local box = obj:GetViewBox({}); log(box.pos_x..box.pos_y..box.pos_z); return a table containing the following field:{pos_x, pos_y,pos_z,obb_x,obb_y,obb_z,} pos_x, pos_y,pos_z: is the point at the bottom center of the box. obb_x,obb_y,obb_z: is the size of the box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="574" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1077" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a820c489dc7a9dca1800ad1dccd50e541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::HasAttachmentPoint</definition>
        <argsstring>(int nAttachmentID)</argsstring>
        <name>HasAttachmentPoint</name>
        <param>
          <type>int</type>
          <declname>nAttachmentID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return whether this model has a given attachment point <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nAttachmentID</parametername>
</parameternamelist>
<parameterdescription>
<para>see ATTACHMENT_ID. default to 0, which is general mount point. ATT_ID_MOUNT1-9(20-28) is another mount points </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="579" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1395" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3a575aa89cdb3dddc434ec667d2ddf7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetAttachmentPosition</definition>
        <argsstring>(int nAttachmentID, float *x, float *y, float *z)</argsstring>
        <name>GetAttachmentPosition</name>
        <param>
          <type>int</type>
          <declname>nAttachmentID</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return this object&apos;s attachment point e.g. local x,y,z = obj:GetAttachmentPosition(0); <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nAttachmentID</parametername>
</parameternamelist>
<parameterdescription>
<para>see ATTACHMENT_ID. default to 0, which is general mount point. ATT_ID_MOUNT1-9(20-28) is another mount points </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x,y,z: in world coordinates </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="586" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1404" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a6262cd03fa96218a3520dc5791c48ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetHomeZone</definition>
        <argsstring>(const char *sHomeZone)</argsstring>
        <name>SetHomeZone</name>
        <param>
          <type>const char *</type>
          <declname>sHomeZone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the home zone of this object if any. it may return NULL, if zone is not visible. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sHomeZone</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is NULL, it will remove the zone. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="591" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1018" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a76dae7fa01555724ff04387b9563dadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetHomeZone</definition>
        <argsstring>()</argsstring>
        <name>GetHomeZone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the home zone of this object if any. it may return NULL or &quot;&quot;, if zone is not visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="594" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1024" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ae84677f7d6fa2f8a09b5548bc819b679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetHeadOnText</definition>
        <argsstring>(const char *sText, int nIndex)</argsstring>
        <name>SetHeadOnText</name>
        <param>
          <type>const char *</type>
          <declname>sText</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the text to be displayed on head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="603" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1294" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a71d725bea0f9f3f7ec7d172128bc73ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetHeadOnText</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetHeadOnText</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the text to be displayed on head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="606" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1302" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a3bf7a19f218627c25becd90a3877766b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetHeadOnUITemplateName</definition>
        <argsstring>(const char *sUIName, int nIndex)</argsstring>
        <name>SetHeadOnUITemplateName</name>
        <param>
          <type>const char *</type>
          <declname>sUIName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set which UI control the head on display will be used as a template for drawing the text it can be a single CGUIText Object or it can be a container with a direct children called &quot;text&quot; if this is &quot;&quot; or empty, the default UI template will be used. The default UI template is an invisible CGUIText control called &quot;_HeadOnDisplayText_&quot; By default, &quot;_HeadOnDisplayText_&quot; uses horizontal text alignment and system font. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="614" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1311" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab61ce9394f330d0b0031c2222dc081fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetHeadOnUITemplateName</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetHeadOnUITemplateName</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get which UI control the head on display will be used as a template for drawing the text it can be a single CGUIText Object or it can be a container with a direct children called &quot;text&quot; if this is &quot;&quot; or empty, the default UI template will be used. The default UI template is an invisible CGUIText control called &quot;_HeadOnDisplayText_&quot; By default, &quot;_HeadOnDisplayText_&quot; uses horizontal text alignment and system font. <simplesect kind="return"><para>: it returns NULL if no UI head on display. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="622" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1319" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8088e54610fb6bb97b06aaa18fd68760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetHeadOnTextColor</definition>
        <argsstring>(const char *color, int nIndex)</argsstring>
        <name>SetHeadOnTextColor</name>
        <param>
          <type>const char *</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the text to be displayed on head on display <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>&quot;r g b&quot; or &quot;r g b a&quot;, such as &quot;0 255 0&quot;, &quot;0 255 0 255&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="627" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1328" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a4ce9395df386f9ddbdc265f8cde05240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetHeadOnOffest</definition>
        <argsstring>(float x, float y, float z, int nIndex)</argsstring>
        <name>SetHeadOnOffest</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the offset where head on display should be rendered relative to the origin or head of the host 3d object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="630" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1343" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a72e32138e01bd6bcca86879299dbdf4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetHeadOnOffset</definition>
        <argsstring>(int nIndex, float *x, float *y, float *z)</argsstring>
        <name>GetHeadOnOffset</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the offset where head on display should be rendered relative to the origin or head of the host 3d object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="633" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1352" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a98e3fa9f88e9f005c9e23f6a176e87a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::ShowHeadOnDisplay</definition>
        <argsstring>(bool bShow, int nIndex)</argsstring>
        <name>ShowHeadOnDisplay</name>
        <param>
          <type>bool</type>
          <declname>bShow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>show or hide object&apos;s head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="636" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1364" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8111cb12fb179a4d4d6c795bf0a28430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsHeadOnDisplayShown</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>IsHeadOnDisplayShown</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object head on display shall be visible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="639" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1372" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a1f508c659cbc48aee4e11ebe31dca869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::HasHeadOnDisplay</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>HasHeadOnDisplay</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object contains head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="642" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1381" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a28e3ab752c61fba83c6f817481bf502e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetXRefScriptCount</definition>
        <argsstring>()</argsstring>
        <name>GetXRefScriptCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the number of the script X reference instances </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="651" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1139" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a600b799f5ed01eb9199b001782c93daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetXRefScript</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetXRefScript</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return xref script file path by index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="654" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1157" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8ae275436dc7994ee64c98e6fc4af7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetXRefScriptPosition</definition>
        <argsstring>(int nIndex, float *x, float *y, float *z)</argsstring>
        <name>GetXRefScriptPosition</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the 3D position in world space of the script object&apos;s origin </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="659" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1175" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aeeaf0dcbba33db9438bf4782be4ca0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetXRefScriptScaling</definition>
        <argsstring>(int nIndex, float *x, float *y, float *z)</argsstring>
        <name>GetXRefScriptScaling</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the scaling of the object in both x,y,z directions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="664" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1195" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aff6e1bd689120ef3d78fffe78fd27c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetXRefScriptFacing</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetXRefScriptFacing</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the facing of the object in xz plane </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="669" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1215" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1acfc803df85d9480362b019d712e3dd50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaScripting::ParaObject::GetXRefScriptLocalMatrix</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetXRefScriptLocalMatrix</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the local transform of the script object. It contains scale and rotation only the string returned by this function must be used at once and should not be saved. This function is also not thread-safe. <simplesect kind="return"><para>: &quot;11,12,13, 21,22,23, 31,32,33,41,42,43&quot; ,where 41,42,43 are always 0. It may return NULL, if the local matrix does not exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="676" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1233" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a20c62813b6e2d5984ec43a22a8bf56eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsSentient</definition>
        <argsstring>()</argsstring>
        <name>IsSentient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the biped is sentient or not </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="683" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="806" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1abe55876fad61c832670aa63e9aa06bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetSentientRadius</definition>
        <argsstring>()</argsstring>
        <name>GetSentientRadius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the sentient radius. usually this is much larger than the perceptive radius. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="686" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="816" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a824f445c83686df90d20ed1a239da09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaObject::GetPerceptiveRadius</definition>
        <argsstring>()</argsstring>
        <name>GetPerceptiveRadius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the perceptive radius. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="689" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="826" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1abd2981be1bd2ee717d4bb2605b50261b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetPerceptiveRadius</definition>
        <argsstring>(float fNewRaduis)</argsstring>
        <name>SetPerceptiveRadius</name>
        <param>
          <type>float</type>
          <declname>fNewRaduis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the perceptive radius. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="691" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="836" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a2fe22898457e0353dd213b621feaf8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetNumOfPerceivedObject</definition>
        <argsstring>()</argsstring>
        <name>GetNumOfPerceivedObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the total number of perceived objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="694" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="846" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a97d50529528a9f008304e415efb94397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaObject::GetPerceivedObject</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetPerceivedObject</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the perceived object by index. This function may return NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="697" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="856" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a4efe8f54484cca14620fbfbad3faa905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsAlwaysSentient</definition>
        <argsstring>()</argsstring>
        <name>IsAlwaysSentient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object is always sentient. The current player is always sentient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="700" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="866" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ad66019dd275ab8b15a5ae46465cf8e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetAlwaysSentient</definition>
        <argsstring>(bool bAlways)</argsstring>
        <name>SetAlwaysSentient</name>
        <param>
          <type>bool</type>
          <declname>bAlways</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set whether sentient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="703" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="876" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab9a478ea06146f17747fcb2d7a01ef2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::MakeSentient</definition>
        <argsstring>(bool bSentient)</argsstring>
        <name>MakeSentient</name>
        <param>
          <type>bool</type>
          <declname>bSentient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the object to sentient. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bSentient</parametername>
</parameternamelist>
<parameterdescription>
<para>true to make sentient. if the object&apos;s sentient count is larger than 0, this function has no effect false, to remove the object from the sentient list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="709" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="885" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a2cbdd14f35599e9655e55022153df055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::UpdateTileContainer</definition>
        <argsstring>()</argsstring>
        <name>UpdateTileContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>update the tile container according to the current position of the game object. This function is automatically called when a global object is attached. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="713" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="894" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a101662d7a47887faa4050de208181bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::MakeGlobal</definition>
        <argsstring>(bool bGlobal)</argsstring>
        <name>MakeGlobal</name>
        <param>
          <type>bool</type>
          <declname>bGlobal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>make the biped global if it is not and vice versa. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="716" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="902" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af43a8a24a5647425d2c1646884d6d878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsGlobal</definition>
        <argsstring>()</argsstring>
        <name>IsGlobal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the object is global or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="719" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="910" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9266c5d84368e0abccfd0473b6cd93dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetGroupID</definition>
        <argsstring>(int nGroup)</argsstring>
        <name>SetGroupID</name>
        <param>
          <type>int</type>
          <declname>nGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the group ID to which this object belongs to. In order to be detected by other game object. Object needs to be in group 0 to 31. default value is 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="723" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="977" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a34f92a86464d8abfd09211188d4fe370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetSentientField</definition>
        <argsstring>(DWORD dwFieldOrGroup, bool bIsGroup)</argsstring>
        <name>SetSentientField</name>
        <param>
          <type>DWORD</type>
          <declname>dwFieldOrGroup</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the sentient field. A bit field of sentient object. from lower bit to higher bits, it matches to the 0-31 groups. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_object_1a9266c5d84368e0abccfd0473b6cd93dc" kindref="member">SetGroupID()</ref> if this is 0x0000, it will detect no objects. If this is 0xffff, it will detects all objects in any of the 32 groups. if this is 0x0001, it will only detect group 0. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwFieldOrGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>this is either treated as field or group,depending on the bIsGroup parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bIsGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, dwFieldOrGroup is treated as a group number of which will object will detect. if this is false, dwFieldOrGroup is treated as a bitwise field of which will object will detect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="732" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="986" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ad8065fd9fe5ec8ea5cd780a46a457907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::IsSentientWith</definition>
        <argsstring>(const ParaObject &amp;pObj)</argsstring>
        <name>IsSentientWith</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return true if the current object is sentient to the specified object. If the object is always sentient, this function will always return true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="735" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="995" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aae0b23373f0a4a5820acef276f7a1f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetMovableRegion</definition>
        <argsstring>(float center_x, float center_y, float center_z, float extent_x, float extent_y, float extent_z)</argsstring>
        <name>SetMovableRegion</name>
        <param>
          <type>float</type>
          <declname>center_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>center_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>center_z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>extent_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>extent_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>extent_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the region within which the object can move. This function is not fully implemented on a per object basis. <simplesect kind="note"><para>: currently it sets the global movable region of the character. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="740" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="938" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ade4a2e77c4a904407651ec1a05f20666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::GetMovableRegion</definition>
        <argsstring>(float *center_x, float *center_y, float *center_z, float *extent_x, float *extent_y, float *extent_z)</argsstring>
        <name>GetMovableRegion</name>
        <param>
          <type>float *</type>
          <declname>center_x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>center_y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>center_z</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>extent_x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>extent_y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>extent_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the region within which the object can move.. This function takes no parameters. input are not input, but pure output. In the script, we can call it as below cx,cy,cz,ex,ey,ez = biped:<ref refid="class_para_scripting_1_1_para_object_1ade4a2e77c4a904407651ec1a05f20666" kindref="member">GetMovableRegion()</ref>; <ndash/> get the biped&apos;s position please note, y is the absolute position in world coordinate <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_object_1aae0b23373f0a4a5820acef276f7a1f3d" kindref="member">SetMovableRegion()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="748" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="948" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1afcd7acdb480c2cb875e4e0261f49fd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetAnimation</definition>
        <argsstring>(int nAnimID)</argsstring>
        <name>SetAnimation</name>
        <param>
          <type>int</type>
          <declname>nAnimID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current animation id <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nAnimID</parametername>
</parameternamelist>
<parameterdescription>
<para>0 is default standing animation. 4 is walking, 5 is running. more information, please see AnimationID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="752" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1419" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ae620e38ba18f2bebe982ee2ee4a3931b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetAnimation</definition>
        <argsstring>()</argsstring>
        <name>GetAnimation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the scaling. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="755" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1427" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aa97d613bbe8503314b91cc77d5f0bb55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnEnterSentientArea</definition>
        <argsstring>() const</argsstring>
        <name>GetOnEnterSentientArea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when other game objects of a different type entered the sentient area of this object. This function will be automatically called by the environment simulator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="762" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="638" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a964f09c397f6c5bbbacee4a7f15fa60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnEnterSentientArea</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnEnterSentientArea</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="763" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="652" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ae1a9cda1da35971a47c5f035e2e75c6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnLeaveSentientArea</definition>
        <argsstring>() const</argsstring>
        <name>GetOnLeaveSentientArea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when no other game objects of different type is in the sentient area of this object. This function will be automatically called by the environment simulator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="767" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="661" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1aa05db00ff06b0441ef507dc77e520991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnLeaveSentientArea</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnLeaveSentientArea</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="768" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="675" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ac9104089374359a7b88cd3ee54527549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnClick</definition>
        <argsstring>() const</argsstring>
        <name>GetOnClick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when the player clicked on this object. This function will be automatically called by the environment simulator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="772" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="691" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a66d07cd7743c2f61f5e7d0f6f9c85262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnClick</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnClick</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="773" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="705" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a232e118cb8da3ebdc2d670710d5d1c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::On_Click</definition>
        <argsstring>(DWORD nMouseKey, DWORD dwParam1, DWORD dwParam2)</argsstring>
        <name>On_Click</name>
        <param>
          <type>DWORD</type>
          <declname>nMouseKey</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>dwParam1</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>dwParam2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>activate the OnClick </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="775" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="683" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a6bda1756cce7a5aea7f0ae56e18e7f80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnPerceived</definition>
        <argsstring>() const</argsstring>
        <name>GetOnPerceived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when other game objects of a different type entered the perceptive area of this object. This function will be automatically called by the environment simulator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="779" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="714" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8649baa6d35ec62cdda43fadca9d19e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnPerceived</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnPerceived</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="780" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="728" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ae578e7f22d8b1615264221fcbaf2bd7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnFrameMove</definition>
        <argsstring>() const</argsstring>
        <name>GetOnFrameMove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called every frame move when this character is sentient. This is most likely used by active AI controllers, such as movie controller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="784" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="737" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a93581bc85da16e4f9cfd6e3d6dda2369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnFrameMove</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnFrameMove</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="785" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="751" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a34041b4de1eb20d2798457d448c70916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnNetSend</definition>
        <argsstring>() const</argsstring>
        <name>GetOnNetSend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>during the execution of this object, it may send various network commands to the server or client. the network module will decide when to group these commands and send them over the network in one package. this function will be called when such network package is being prepared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="790" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="760" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab8ddc2456d9c8fba194276b3e7c59b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnNetSend</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnNetSend</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="791" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="774" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a8bf18c7e657762753d18c7fd84885334" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaObject::GetOnNetReceive</definition>
        <argsstring>() const</argsstring>
        <name>GetOnNetReceive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when the network module receives packages from the network and it is about a certain game object. Then this function will be automatically called. In this function, the game object may read the network packages and act accordingly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="796" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="783" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a6399a11ba454d423e5573a2337c86549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetOnNetReceive</definition>
        <argsstring>(const char *script)</argsstring>
        <name>SetOnNetReceive</name>
        <param>
          <type>const char *</type>
          <declname>script</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="797" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="797" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a344e3e1cc29b773dfd450f6547bb0fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetEffectHandle</definition>
        <argsstring>()</argsstring>
        <name>GetEffectHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current shader handle used to render the object <simplesect kind="see"><para>TechniqueHandle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="808" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1005" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a42dccb8263ec2138dae6e79cedaf9609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaObject::SetEffectHandle</definition>
        <argsstring>(int nHandle)</argsstring>
        <name>SetEffectHandle</name>
        <param>
          <type>int</type>
          <declname>nHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the shader handle used to render the object. Please note, object will be immediately rendered using the newly assigned shader in the next frame. shade handle in the range [0,2048] is reserved for ParaEngine&apos;s internal usage. CAUTION: setting a shader whose input is incompatible with the object&apos;s internal data presentation will cause the application to close. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nHandle</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>TechniqueHandle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="816" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1012" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a6eff2456934ff53d297b3bc79a71e6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::AddReference</definition>
        <argsstring>(const ParaObject &amp;maker, int nTag)</argsstring>
        <name>AddReference</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>maker</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add a new reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maker</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="829" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1029" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a38e3567f91f2b89d84b25d5308927b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::DeleteReference</definition>
        <argsstring>(const ParaObject &amp;ref)</argsstring>
        <name>DeleteReference</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete a reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return REF_FAIL if reference not found. otherwise REF_SUCCEED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="836" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1038" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a1ba4008f3ed477ff0520f548a7e19c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::DeleteAllRefs</definition>
        <argsstring>()</argsstring>
        <name>DeleteAllRefs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes all references of this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="839" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1047" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ad4a252feae8f79de0ec4cd0779ae5c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetRefObjNum</definition>
        <argsstring>()</argsstring>
        <name>GetRefObjNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the total number of references </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="842" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1056" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1acaf03e9864fbbe7a1bf9aacab411377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaObject::GetRefObject</definition>
        <argsstring>(int nIndex)</argsstring>
        <name>GetRefObject</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the referenced object at the given index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="845" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1065" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1af27f5da8db292aaac2cdf73e31a739b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaScripting::ParaAssetObject ParaScripting::ParaObject::GetTexture</definition>
        <argsstring>()</argsstring>
        <name>GetTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get primary texture object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="848" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1511" bodyend="1514"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a64be137c443dcff397fb851ee931b701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaObject::GetNumReplaceableTextures</definition>
        <argsstring>()</argsstring>
        <name>GetNumReplaceableTextures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the total number of replaceable textures, which is the largest replaceable texture ID. but it does not mean that all ID contains valid replaceable textures. This function can be used to quickly decide whether the model contains replaceable textures. Generally we allow 32 replaceable textures per model. <simplesect kind="note"><para>: This function will cause the mesh entity to be initialized. </para></simplesect>
<simplesect kind="return"><para>0 may be returned if no replaceable texture is used by the model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="864" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1094" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a9c91dd0ee0820c57429b35c721baf1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaScripting::ParaObject::GetDefaultReplaceableTexture</definition>
        <argsstring>(int ReplaceableTextureID)</argsstring>
        <name>GetDefaultReplaceableTexture</name>
        <param>
          <type>int</type>
          <declname>ReplaceableTextureID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the default replaceable texture by its ID. The default replaceable texture is the main texture exported from the 3dsmax exporter. <simplesect kind="note"><para>: This function will cause the mesh entity to be initialized. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ReplaceableTextureID</parametername>
</parameternamelist>
<parameterdescription>
<para>usually [0-32) generally speaking, replaceable ID 0 is used for general purpose replaceable texture, ID 1 is for user defined. ID 2 is for custom skins. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this may return NULL, if replaceable texture is not set before or ID is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="874" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1103" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1ab3805e19b1175ea6066d3ae69d8f2e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaScripting::ParaObject::GetReplaceableTexture</definition>
        <argsstring>(int ReplaceableTextureID)</argsstring>
        <name>GetReplaceableTexture</name>
        <param>
          <type>int</type>
          <declname>ReplaceableTextureID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the current replaceable texture by its ID. if no replaceable textures is set before, this will return the same result as <ref refid="class_para_scripting_1_1_para_object_1a64be137c443dcff397fb851ee931b701" kindref="member">GetNumReplaceableTextures()</ref>. <simplesect kind="note"><para>: This function will cause the mesh entity to be initialized. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ReplaceableTextureID</parametername>
</parameternamelist>
<parameterdescription>
<para>usually [0-32) generally speaking, replaceable ID 0 is used for general purpose replaceable texture, ID 1 is for user defined. ID 2 is for custom skins. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this may return NULL, if replaceable texture is not set before or ID is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="884" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1113" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_object_1a473dfbf3d5c8894db5a40e124c43901e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaObject::SetReplaceableTexture</definition>
        <argsstring>(int ReplaceableTextureID, ParaAssetObject pTextureEntity)</argsstring>
        <name>SetReplaceableTexture</name>
        <param>
          <type>int</type>
          <declname>ReplaceableTextureID</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
          <declname>pTextureEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the replaceable texture at the given index with a new texture. this function will succeed regardless whether the mesh is initialized. Hence it can be used at loading time. because default instance of the mesh may use different replaceable texture set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ReplaceableTextureID</parametername>
</parameternamelist>
<parameterdescription>
<para>usually [0-32) generally speaking, replaceable ID 0 is used for general purpose replaceable texture, ID 1 is for user defined. ID 2 is for custom skins. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pTextureEntity</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference account of the texture entity will be automatically increased by one. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if succeed. if ReplaceableTextureID exceed the total number of replaceable textures, this function will return false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="895" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1123" bodyend="1137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> class: it is used to control game scene objects from scripts. <simplesect kind="par"><title>Class Properties</title><para></para></simplesect>
<itemizedlist>
<listitem><para>(&quot;name&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1adffa045b187a9debfc8924e6df8c478a" kindref="member">ParaObject::GetName</ref>,&amp;<ref refid="class_para_scripting_1_1_para_object_1a3f04234bfafe12a31503725d1e1d97b6" kindref="member">ParaObject::SetName</ref>)</para></listitem><listitem><para>(&quot;onclick&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1ac9104089374359a7b88cd3ee54527549" kindref="member">ParaObject::GetOnClick</ref>,&amp;ParaObject::SetOnClick)</para></listitem><listitem><para>(&quot;onentersentientarea&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1aa97d613bbe8503314b91cc77d5f0bb55" kindref="member">ParaObject::GetOnEnterSentientArea</ref>,&amp;ParaObject::SetOnEnterSentientArea)</para></listitem><listitem><para>(&quot;onleavesentientarea&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1ae1a9cda1da35971a47c5f035e2e75c6b" kindref="member">ParaObject::GetOnLeaveSentientArea</ref>,&amp;ParaObject::SetOnLeaveSentientArea)</para></listitem><listitem><para>(&quot;onperceived&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1a6bda1756cce7a5aea7f0ae56e18e7f80" kindref="member">ParaObject::GetOnPerceived</ref>,&amp;ParaObject::SetOnPerceived)</para></listitem><listitem><para>(&quot;onframemove&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1ae578e7f22d8b1615264221fcbaf2bd7b" kindref="member">ParaObject::GetOnFrameMove</ref>,&amp;ParaObject::SetOnFrameMove)</para></listitem><listitem><para>(&quot;onnetreceive&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1a8bf18c7e657762753d18c7fd84885334" kindref="member">ParaObject::GetOnNetReceive</ref>,&amp;ParaObject::SetOnNetReceive)</para></listitem><listitem><para>(&quot;onnetsend&quot;,&amp;<ref refid="class_para_scripting_1_1_para_object_1a34041b4de1eb20d2798457d448c70916" kindref="member">ParaObject::GetOnNetSend</ref>,&amp;ParaObject::SetOnNetSend) </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="ParaScriptBindings/ParaScriptingScene.h" line="57" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.h" bodystart="56" bodyend="896"/>
    <listofallmembers>
      <member refid="class_para_scripting_1_1_para_object_1a610af924c795391f53fe6edef1cb7538" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>AddChild</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3149571ad6ca1dff2105c6871e858632" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>AddEvent</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a6eff2456934ff53d297b3bc79a71e6b3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>AddReference</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a54cea37ad7f35b76c680af89e746782d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>CallField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9a883da2a8d71ecf59ab40749037122b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>CheckAttribute</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a81887ff5a3fdb3b1043cc2a8eb31c44d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>CheckLoadPhysics</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a1ba4008f3ed477ff0520f548a7e19c21" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DeleteAllRefs</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a38e3567f91f2b89d84b25d5308927b03" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DeleteReference</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8e9d99229c9daccf2b6f9f73eaca143d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DistanceTo</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a12c11c0b56ee6453b4f193c9317cfdbf" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DistanceToCameraSq</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ad87cc06b927fe0f19dd10a72fcb6bd04" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DistanceToPlayerSq</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9f5cc34ff3ba846f3e4faa8ab97ec3c7" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>DistanceToSq</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a72a34f5e698e0cef6a2f770820bda131" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>EnablePhysics</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a38069bd89c6eb3154e9a4fe6a54269e6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>equals</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8d69c9820c76a30bcf8edf1c0855d937" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>get</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ae620e38ba18f2bebe982ee2ee4a3931b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetAnimation</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3a575aa89cdb3dddc434ec667d2ddf7a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetAttachmentPosition</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af89fe292cb8f53af915efa9e2fbeb0a8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetAttributeObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1acd812099f4f201b5290d5caab6fbee29" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetAttributeObject_</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9c91dd0ee0820c57429b35c721baf1dd" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetDefaultReplaceableTexture</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ac4a14fda646111e3d7fb29580c936878" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetDensity</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a40ca121fcb5902d724b54f0651e49ee8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetDynamicField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a344e3e1cc29b773dfd450f6547bb0fda" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetEffectHandle</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af8d508babe8ab892189613f34e66f82a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetEffectParamBlock</name></member>
      <member refid="class_para_scripting_1_1_para_object_1acfea56f028d54f0759116b999dd8659d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetFacing</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a5948f577037be5b23231308f85b2d555" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a72e32138e01bd6bcca86879299dbdf4b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetHeadOnOffset</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a71d725bea0f9f3f7ec7d172128bc73ce" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetHeadOnText</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab61ce9394f330d0b0031c2222dc081fe" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetHeadOnUITemplateName</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a76dae7fa01555724ff04387b9563dadc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetHomeZone</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a20fb50d8893f7e3182e196d7c7c6c0e9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetID</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ade4a2e77c4a904407651ec1a05f20666" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetMovableRegion</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a84efae73b7b8cc2e593d8c4a84c7c6ac" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetMyType</name></member>
      <member refid="class_para_scripting_1_1_para_object_1adffa045b187a9debfc8924e6df8c478a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetName</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a4426b9584d0b0694f5d24613a64fb344" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetName_</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a2fe22898457e0353dd213b621feaf8f5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetNumOfPerceivedObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a64be137c443dcff397fb851ee931b701" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetNumReplaceableTextures</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a315dd5625007e7218184b9b07c737969" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ac9104089374359a7b88cd3ee54527549" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnClick</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aa97d613bbe8503314b91cc77d5f0bb55" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnEnterSentientArea</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ae578e7f22d8b1615264221fcbaf2bd7b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnFrameMove</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ae1a9cda1da35971a47c5f035e2e75c6b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnLeaveSentientArea</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8bf18c7e657762753d18c7fd84885334" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnNetReceive</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a34041b4de1eb20d2798457d448c70916" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnNetSend</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a6bda1756cce7a5aea7f0ae56e18e7f80" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetOnPerceived</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a97d50529528a9f008304e415efb94397" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPerceivedObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a824f445c83686df90d20ed1a239da09f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPerceptiveRadius</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a95cd72ec7761fa5ed2b56ee14a2710e2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPhysicsGroup</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a76552790e63d6044dedfde7417c33771" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPhysicsHeight</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a24335694bb4bc46eba5e112ead94c6c9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPhysicsRadius</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a88cd8c013ef66684fb3507d624c2b5e3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPosition</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ad74b98cacb87efcb767af45d772f5b87" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPrimaryAsset</name></member>
      <member refid="class_para_scripting_1_1_para_object_1abe05c07ffd1f6f93c30f78f19db70a84" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetPrimaryAsset_</name></member>
      <member refid="class_para_scripting_1_1_para_object_1acaf03e9864fbbe7a1bf9aacab411377f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetRefObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ad4a252feae8f79de0ec4cd0779ae5c1c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetRefObjNum</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab3805e19b1175ea6066d3ae69d8f2e3d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetReplaceableTexture</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab14459d81fbb461157850861b4d74c8a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetRotation</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3f48a3ee63d1c7bdc0195a94d841568b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetScale</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a361560321ac40b08c63acc54195cb25a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetSelectGroupIndex</name></member>
      <member refid="class_para_scripting_1_1_para_object_1abe55876fad61c832670aa63e9aa06bf8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetSentientRadius</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af27f5da8db292aaac2cdf73e31a739b3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetTexture</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9635c9749259ee50ea83b55802fbb5e5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetType</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a535b56ebd96202c89d659e0e24d4e245" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetViewBox</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3b2bd2b438d740195566e5f5b3d70f93" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetViewCenter</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a600b799f5ed01eb9199b001782c93daa" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScript</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a28e3ab752c61fba83c6f817481bf502e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScriptCount</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aff6e1bd689120ef3d78fffe78fd27c87" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScriptFacing</name></member>
      <member refid="class_para_scripting_1_1_para_object_1acfc803df85d9480362b019d712e3dd50" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScriptLocalMatrix</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8ae275436dc7994ee64c98e6fc4af7e2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScriptPosition</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aeeaf0dcbba33db9438bf4782be4ca0df" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>GetXRefScriptScaling</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a820c489dc7a9dca1800ad1dccd50e541" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>HasAttachmentPoint</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a1f508c659cbc48aee4e11ebe31dca869" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>HasHeadOnDisplay</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a4efe8f54484cca14620fbfbad3faa905" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsAlwaysSentient</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a5d38b4fb6f83d61c95f9fb4dec0d6e5f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsAttached</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a1a009a2720a1da767c2e8cb235d5bf5f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsCharacter</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af43a8a24a5647425d2c1646884d6d878" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsGlobal</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8111cb12fb179a4d4d6c795bf0a28430" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsHeadOnDisplayShown</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9ccb8e29e0ef0fbc7497d301ad3015d3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsOPC</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ac98b9fb54ae1d133a5d24ab94b0986ee" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsPersistent</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ada3d2704acbea283d49cbd4c70c35632" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsPhysicsEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a20c62813b6e2d5984ec43a22a8bf56eb" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsSentient</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ad8065fd9fe5ec8ea5cd780a46a457907" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsSentientWith</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a199ab949d755f87755c1f105ed61da33" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsStanding</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a197d7eb4798570096319e6fa5d392413" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsValid</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab3683becc5a8e2913942db36f13695db" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>IsVisible</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a655f3b7a9594273dcb16e59285786309" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>LoadPhysics</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9b42c0c2de5e8b8dc6cc33988cc3bd7d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>m_pObj</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a101662d7a47887faa4050de208181bbf" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>MakeGlobal</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab9a478ea06146f17747fcb2d7a01ef2a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>MakeSentient</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ae61b37c9ec9101a59383b39753aab8ca" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>OffsetPosition</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a232e118cb8da3ebdc2d670710d5d1c60" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>On_Click</name></member>
      <member refid="class_para_scripting_1_1_para_object_1afeba29bdc07382139a8fbb5146433507" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ParaObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3ffc9a598a8e02d33c358625a795572a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ParaObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a663993b1a6f8833791262a953dc85920" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>Reset</name></member>
      <member refid="class_para_scripting_1_1_para_object_1adf250b11b2e29e4100c53cf2849728be" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>Rotate</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab309488f661e3c65963ad7d44e8a2b01" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SaveToDB</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab155d5846420ab8808df5632abdf5a55" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>Scale</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ad66019dd275ab8b15a5ae46465cf8e4d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetAlwaysSentient</name></member>
      <member refid="class_para_scripting_1_1_para_object_1afcd7acdb480c2cb875e4e0261f49fd9b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetAnimation</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a40cfd9957cc7b58c98bca9e85048d9a5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetAttribute</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a5f806ed414b8db46589dcbd7eaeaf39a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetDensity</name></member>
      <member refid="class_para_scripting_1_1_para_object_1abb55a96ae779817363ece0406661b5f9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetDynamicField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a42dccb8263ec2138dae6e79cedaf9609" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetEffectHandle</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a48f35e380f28a30be79d8c2c8ede11ab" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetFacing</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a7e4b00c265a9e260ed718caeee88ea89" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a9266c5d84368e0abccfd0473b6cd93dc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetGroupID</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a4ce9395df386f9ddbdc265f8cde05240" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetHeadOnOffest</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ae84677f7d6fa2f8a09b5548bc819b679" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetHeadOnText</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8088e54610fb6bb97b06aaa18fd68760" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetHeadOnTextColor</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3bf7a19f218627c25becd90a3877766b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetHeadOnUITemplateName</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a6262cd03fa96218a3520dc5791c48ad9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetHomeZone</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aae0b23373f0a4a5820acef276f7a1f3d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetMovableRegion</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a3f04234bfafe12a31503725d1e1d97b6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetName</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a66d07cd7743c2f61f5e7d0f6f9c85262" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnClick</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a964f09c397f6c5bbbacee4a7f15fa60d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnEnterSentientArea</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a93581bc85da16e4f9cfd6e3d6dda2369" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnFrameMove</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aa05db00ff06b0441ef507dc77e520991" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnLeaveSentientArea</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a6399a11ba454d423e5573a2337c86549" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnNetReceive</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ab8ddc2456d9c8fba194276b3e7c59b9f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnNetSend</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8649baa6d35ec62cdda43fadca9d19e3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetOnPerceived</name></member>
      <member refid="class_para_scripting_1_1_para_object_1abd2981be1bd2ee717d4bb2605b50261b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPerceptiveRadius</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af38d8708c1cfc2439907b6b2179ed632" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPersistent</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a5b1c5c52cb9a3c11f8e84136041e06b4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPhysicsGroup</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a85b0b7d576e04cfe03a340cd78a6f025" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPhysicsHeight</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a5384199b74a390800bc46011ac008cb7" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPhysicsRadius</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ac8b76a69701cd8eb26d31f64bf29f8f0" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetPosition</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a473dfbf3d5c8894db5a40e124c43901e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetReplaceableTexture</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a8b2825b826561cffc279b98d8fbe1f23" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetRotation</name></member>
      <member refid="class_para_scripting_1_1_para_object_1abd01eb72c1b03404209a0d4ca09780f8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetScale</name></member>
      <member refid="class_para_scripting_1_1_para_object_1ac4913f7001a1e8421912ac8a953ca842" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetScaling</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a1db03494d4bb3ca41fddb84cc9b02558" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetSelectGroupIndex</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a34f92a86464d8abfd09211188d4fe370" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetSentientField</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a2b720f3f8e91401eae487dd0dd544806" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SetVisible</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a98e3fa9f88e9f005c9e23f6a176e87a6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ShowHeadOnDisplay</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a455590f45600d036769547c84d7f630b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>SnapToTerrainSurface</name></member>
      <member refid="class_para_scripting_1_1_para_object_1aac26dfa773ed793946f5723b981259a4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ToCharacter</name></member>
      <member refid="class_para_scripting_1_1_para_object_1af68bc53681ea2b5ab0546e720d169234" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ToGameObject</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a786a3b50672aea527292f0f55675ffba" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ToString</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a6492e6b2524c858ee8cf8d5923451b46" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>ToString1</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a2cbdd14f35599e9655e55022153df055" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>UpdateTileContainer</name></member>
      <member refid="class_para_scripting_1_1_para_object_1a31b43e1b046e5bf44a301c7843b8862b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaObject</scope><name>~ParaObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
