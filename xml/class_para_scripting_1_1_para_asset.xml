<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_para_scripting_1_1_para_asset" kind="class" language="C++" prot="public">
    <compoundname>ParaScripting::ParaAsset</compoundname>
    <includes refid="_para_scripting_common_8h" local="no">ParaScriptingCommon.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a617c8a26eaa8c72f5e944550106d6d18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::OpenArchive</definition>
        <argsstring>(const char *strFileName)</argsstring>
        <name>OpenArchive</name>
        <param>
          <type>const char *</type>
          <declname>strFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open the archive file(zip or pkg file) for further resource file searching. If any file can not be located on the disk file system, it will go on searching for it in the archive file. files in the archive file will be relative to the ParaEngine SDK root directory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the package file path name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="331" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="602" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a72e0b41c153bf56864275c2c4a67b4f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::GeneratePkgFile</definition>
        <argsstring>(const char *srcZip, const char *destPkg)</argsstring>
        <name>GeneratePkgFile</name>
        <param>
          <type>const char *</type>
          <declname>srcZip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>destPkg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a pkg file which is equivalent to the specified zip file. This function can only be called, when a zip file can be successfully loaded. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcZip</parametername>
</parameternamelist>
<parameterdescription>
<para>the zip file name from which to generate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destPkg</parametername>
</parameternamelist>
<parameterdescription>
<para>: destination file. if nil, it just rename the srcZip </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful. It will overwrite existing file. Output file is at the save directory and filename but with pkg file extension. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="341" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="610" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1ad491b0aade4b60ca5ea11f548ba88f22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::OpenArchive2</definition>
        <argsstring>(const char *strFileName, bool bUseRelativePath)</argsstring>
        <name>OpenArchive2</name>
        <param>
          <type>const char *</type>
          <declname>strFileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bUseRelativePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open the archive file(zip or pkg file) for further resource file searching. If any file can not be located on the disk file system, it will go on searching for it in the archive file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the package file path name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bUseRelativePath</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, files in the archive file will be relative to the parent directory of archive path. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="349" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="644" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a76ef47e692ffb046abcfbbf36f895f76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::OpenArchiveEx</definition>
        <argsstring>(const char *strFileName, const char *sRootDir)</argsstring>
        <name>OpenArchiveEx</name>
        <param>
          <type>const char *</type>
          <declname>strFileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sRootDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add archive to manager <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>path of the zip or pkg file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sRootDir</parametername>
</parameternamelist>
<parameterdescription>
<para>files in the archive will be regarded as relative to this this root directory. If this is &quot;&quot;, there is no root directory set. such as &quot;model/&quot;, &quot;script/&quot;, characters after the last slash is always stripped off. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="356" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="652" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a1d264bcbab23ed118ac1f64b12e1c2dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::CloseArchive</definition>
        <argsstring>(const string &amp;path)</argsstring>
        <name>CloseArchive</name>
        <param>
          <type>const string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>close an archive. When done with an archive, one should always close it. Too many opened archives will compromise the IO performances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="360" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1ae79ade032fd3ba9771924d241f5cfbc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaAsset::GetAssetServerUrl</definition>
        <argsstring>()</argsstring>
        <name>GetAssetServerUrl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when an asset is not found, we will try to find it via this url. e.g. if asset is &quot;model/test.dds&quot;, and asset url is &quot;http://asset.paraengine.com/&quot;, then we will fetch the asset via &quot;http://asset.paraengine.com/model/test.dds&quot; if the asset path is &quot;&quot;, asset server will be disabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="366" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="876" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a5f22926d97e07fb9f8f056b075bda276" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::SetAssetServerUrl</definition>
        <argsstring>(const char *path)</argsstring>
        <name>SetAssetServerUrl</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when an asset is not found, we will try to find it via this url. e.g. if asset is &quot;model/test.dds&quot;, and asset url is &quot;http://asset.paraengine.com/&quot;, then we will fetch the asset via &quot;http://asset.paraengine.com/model/test.dds&quot; if the asset path is &quot;&quot;, asset server will be disabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path:if</parametername>
</parameternamelist>
<parameterdescription>
<para>the asset path is &quot;&quot;, asset server will be disabled. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="373" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="881" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a2e81a0a87a103e8cc444ba32625bd0de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::GarbageCollect</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Garbage Collect all assets according to reference count. If the reference count is not maintained well by the user, this function is not effective as <ref refid="class_para_scripting_1_1_para_asset_1a645ec4fd3611f559f989567b875a296a" kindref="member">UnloadAll()</ref>. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_asset_1a645ec4fd3611f559f989567b875a296a" kindref="member">UnloadAll()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="377" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="692" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::Unload</definition>
        <argsstring>(const char *assettype)</argsstring>
        <name>Unload</name>
        <param>
          <type>const char *</type>
          <declname>assettype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload an asset by its type name. once an unloaded asset is used again, its device resource will be reinitialized. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para>value and meaning are listed below<itemizedlist>
<listitem><para>&quot;*&quot;: Unload all assets. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_asset_1a645ec4fd3611f559f989567b875a296a" kindref="member">UnloadAll()</ref><itemizedlist>
<listitem><para>&quot;ParaX&quot;: <ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload</ref> all ParaX models</para></listitem><listitem><para>&quot;StaticMesh&quot;: <ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload</ref> all StaticMesh models</para></listitem><listitem><para>&quot;Texture&quot;: <ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload</ref> all Texture</para></listitem><listitem><para>&quot;Sound&quot;: <ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload</ref> all Sound</para></listitem><listitem><para>&quot;Font&quot;: <ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload</ref> all Font TODO: currently only &quot;*&quot; is supported. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="389" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="673" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a645ec4fd3611f559f989567b875a296a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::UnloadAll</definition>
        <argsstring>()</argsstring>
        <name>UnloadAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unload all assets. once an unloaded asset is used again, its device resource will be reinitialized. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" kindref="member">Unload()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="392" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="688" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1afefbdb611615b6346561485e91fd11a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::UnloadDatabase</definition>
        <argsstring>()</argsstring>
        <name>UnloadDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unload all databases. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="395" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="683" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1ad625d3e477d4c18685e6003b0fb4976e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize all objects that have not been created yet NOTE: always call this function at least once when finished creating a batch of assets assets created using any of the functions in this namespace can not be used until this function is called. </para>        </detaileddescription>
        <inbodydescription>
<para>you can call &quot;init&quot; as many times as you like. Asset Manager guaranteed that if a object is valid, it will not be reinitialied</para><para>we needs to call RestoreDeviceObjects() to initialize device dependence object like the local mesh in the Mesh entity. </para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="403" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="664" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1aa7520d44dc3cce19da928887524281b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaScripting::ParaAssetObject ParaAsset::LoadEffectFile</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath)</argsstring>
        <name>LoadEffectFile</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load effect file from a text or compiled HLSL file. It will return the old effect if effect is already loaded before. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="408" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="832" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a21a6e728b570262e4220ff3885f5152e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaScripting::ParaAssetObject ParaAsset::GetEffectFile</definition>
        <argsstring>(const char *strAssetName)</argsstring>
        <name>GetEffectFile</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>load an effect file by its name. it will return an invalid effect if the effect is not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="413" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="845" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1abd2af1e6d2a5414ab1a9f8f4952543d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadParaX</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath)</argsstring>
        <name>LoadParaX</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load ParaX model asset, ParaX model file contains mesh, skeletal animation, etc. Currently ParaX and mdx file format is supported, please refer to ParaX file document for creating ParaX file based multianimation asset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="420" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="697" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a4a40c725eb540ddc69608e2a584a88b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaScripting::ParaAssetObject ParaAsset::LoadDatabase</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath)</argsstring>
        <name>LoadDatabase</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load Database asset. it must be sqlite database at the moment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="425" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="800" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1ab7ce028375ab020e16d8b37cc2a85376" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadStaticMesh</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath)</argsstring>
        <name>LoadStaticMesh</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a X file based static mesh object. If any side of the mesh&apos;s bounding box is longer than 50 meters(units) and that the triangle count is over 1500, Octree will be used to sort its triangle lists, otherwise no culling optimization will be used when rendering the mesh. Static mesh is suitable for rendering small repeated object such as stones, trees, or large object such as level mesh. another usage is that it can be used as physical data to be fed to the physics engine, in which case simple and convex geometry should be used as much as possible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="436" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="710" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1ab1f148feddf4a43b27d3a00847b403b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadTexture</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath, int nSurfaceType)</argsstring>
        <name>LoadTexture</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSurfaceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>: we treat png file as DXT3 by default. if the texture filename ends with &quot;_32bits.png&quot;, we will load with D3DFMT_A8R8G8B8 instead of DXT3. If one wants to ensure high resolution texture, use TGA format instead. All dds textures are loaded with full mipmapping default. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>if the file name ends with _a{0-9}{0-9}{0-9}.xxx, it will be regarded as a texture sequence. and the nSurfaceType will be ignored and forced to TextureSequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nSurfaceType</parametername>
</parameternamelist>
<parameterdescription>
<para>enum _SurfaceType { / render target, call SetTextureInfo() to specify size. if SetTextureInfo() / is never called, the back buffer size is used. RenderTarget = 0, / normal managed texture, with all mip-mapping level created StaticTexture = 1, / a group of textures, such as xxx_a001.jpg, ..., xxx_a009.jpg TextureSequence = 2, / texture in memory SysMemoryTexture, / BLP textures BlpTexture, / detailed terrain texture TerrainHighResTexture, / cube texture for environment mapping, etc. CubeTexture, } </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="466" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="740" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1aa51b2627ecb0dd918bb3010f29f24a13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaScripting::ParaAssetObject ParaAsset::LoadRenderTarget</definition>
        <argsstring>(const char *strAssetName, int width, int height)</argsstring>
        <name>LoadRenderTarget</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="467" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="757" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a997b70f814b890c284ec6c28113b5f5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadSpriteFrame</definition>
        <argsstring>(const char *strAssetName, int nFrames, int nRow, int nCol)</argsstring>
        <name>LoadSpriteFrame</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nFrames</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nRow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sprite object must be created from Sprite frame and a texture. This is to create the sprite frame, which tells the engine how the sprite is loaded in the texture. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nFrames</parametername>
</parameternamelist>
<parameterdescription>
<para>how many frames the sprite has </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nRow</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the texture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCol</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the texture </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="475" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="775" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a06398510a7ee75dcbef0be4920363fb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadFont</definition>
        <argsstring>(const char *strAssetName, const char *FontName, int nFontSize)</argsstring>
        <name>LoadFont</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>FontName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nFontSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>load a system font, such as arial, times new man, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nFontSize</parametername>
</parameternamelist>
<parameterdescription>
<para>in pixels </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="480" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="784" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1aae393441010f77173a662a5c7ad909fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadImageFont</definition>
        <argsstring>(const char *strAssetName, const char *TextureName, int nSize, int nTxtColumns)</argsstring>
        <name>LoadImageFont</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>TextureName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTxtColumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>load an image based font, not tested. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="484" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="789" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a774c8a6264c41dd393b955bb8e618646" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaAsset::LoadSound</definition>
        <argsstring>(const char *strAssetName, const char *strFilePath, bool bInit)</argsstring>
        <name>LoadSound</name>
        <param>
          <type>const char *</type>
          <declname>strAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFilePath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bInit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>load a sound or music. The sound is not initialized until it is played for the first time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bInit</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to initialize the file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="489" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="793" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1af669f6266a26b615f116d971b8c2ffca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaAsset::AddFontName</definition>
        <argsstring>(const string &amp;sLocalName, const string &amp;sTypeFaceName)</argsstring>
        <name>AddFontName</name>
        <param>
          <type>const string &amp;</type>
          <declname>sLocalName</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>sTypeFaceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>give an alias name to a given font name. The most common use of this function is to replace the &quot;System&quot; font with a custom game font installed at &quot;fonts/&quot; folder. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sLocalName</parametername>
</parameternamelist>
<parameterdescription>
<para>a local file name like &quot;System&quot;, &quot;Default&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sTypeFaceName</parametername>
</parameternamelist>
<parameterdescription>
<para>the real type face name to use when creating the font. please note that, the engine will search for the file &quot;fonts/[sTypeFaceName].ttf&quot;, if this file exists, it will use that it, instead of the system installed font if any. Note: game custom font files under &quot;fonts/&quot; must be named by their true font name (i.e. type face name), otherwise they will not be loaded properly. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="499" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="871" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a5e353cd1db8ae1f2342de22cf97b1b90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaAsset::GetBoneAnimProviderIDByName</definition>
        <argsstring>(const char *sName)</argsstring>
        <name>GetBoneAnimProviderIDByName</name>
        <param>
          <type>const char *</type>
          <declname>sName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get provider id by name. Name is used when creating the provider instance. It is usually the same as the file path from which animation data is loaded. return -1 if not found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="512" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="806" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1af05a1e3810c7794a76fd3f9d3eb8d4fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ParaAsset::GetBoneAnimProviderFileNameByID</definition>
        <argsstring>(int nAnimID)</argsstring>
        <name>GetBoneAnimProviderFileNameByID</name>
        <param>
          <type>int</type>
          <declname>nAnimID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the file name of a given animID. It may return NULL, if animID is invalid or is an internal animation id. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="517" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="811" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a887a8da720bedbf3016f4d346e8dc7c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaAsset::CreateBoneAnimProvider</definition>
        <argsstring>(int nAnimID, const char *name, const char *filename, bool bOverwrite)</argsstring>
        <name>CreateBoneAnimProvider</name>
        <param>
          <type>int</type>
          <declname>nAnimID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bOverwrite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an animation provider from file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nAnimID</parametername>
</parameternamelist>
<parameterdescription>
<para>-1 if one wants it to be automatically assigned. otherwise one can manually specify one. Please note, if there is already a provider with the same ID, the old one is automatically released and replaced with the new one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>optional key. Allowing user to query by a user friendly name. This can be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>from which file the animation data is loaded. It can be a ParaX animation file or BVH file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bOverwrite</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to overwrite existing with the same nAnimID or name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the nAnimID, in case nAnim is set to -1. -1 is returned, if failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="528" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="821" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a446e0217129c25da2b4e004c2fb3cc35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::DeleteBoneAnimProvider</definition>
        <argsstring>(int nAnimID)</argsstring>
        <name>DeleteBoneAnimProvider</name>
        <param>
          <type>int</type>
          <declname>nAnimID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete a provider by ID. <simplesect kind="return"><para>: return true if succeed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="533" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="827" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1a2f21158554c1be759090178f7a765d7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaAsset::PrintToFile</definition>
        <argsstring>(const char *strFileName, DWORD dwSelection)</argsstring>
        <name>PrintToFile</name>
        <param>
          <type>const char *</type>
          <declname>strFileName</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>dwSelection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print all asset file to a given file. Each asset is on a single line, in the following format: [AssetFileName] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>to which file the result is written to. if NULL or &quot;&quot;, it is &quot;temp/assets.txt&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwSelection</parametername>
</parameternamelist>
<parameterdescription>
<para>bitwise on which assets to export, 1 is for texture, 2 is for Mesh, 4 is for ParaXEntity. Default to 0xffffffff </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: the number of results printed are returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="541" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="855" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_1acb8f29005912715027e044c13202a6da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaAsset::Refresh</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>Refresh</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>refresh asset if it is already loaded. it will search for all refreshable asset type, such as textures and mesh, etc. if found, it will call the <ref refid="class_para_scripting_1_1_para_asset_1acb8f29005912715027e044c13202a6da" kindref="member">Refresh()</ref> method on the asset entity and return true, or return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingCommon.h" line="546" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.cpp" bodystart="886" bodyend="889"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_para_scripting_1_1_para_asset" kindref="compound">ParaAsset</ref> namespace contains a list of HAPI functions to manage resources(asset) used in game world composing, such as 3d models, textures, animations, sound, etc. Resources are used to create scene objects. assets of the same type must have different names. Assets must be initialized before they can be used, and this should be manually done in scripts by calling <ref refid="class_para_scripting_1_1_para_asset_1ad625d3e477d4c18685e6003b0fb4976e" kindref="member">Init()</ref>. </para>    </detaileddescription>
    <location file="ParaScriptBindings/ParaScriptingCommon.h" line="323" column="1" bodyfile="ParaScriptBindings/ParaScriptingCommon.h" bodystart="322" bodyend="547"/>
    <listofallmembers>
      <member refid="class_para_scripting_1_1_para_asset_1af669f6266a26b615f116d971b8c2ffca" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>AddFontName</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a1d264bcbab23ed118ac1f64b12e1c2dc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>CloseArchive</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a887a8da720bedbf3016f4d346e8dc7c5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>CreateBoneAnimProvider</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a446e0217129c25da2b4e004c2fb3cc35" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>DeleteBoneAnimProvider</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a2e81a0a87a103e8cc444ba32625bd0de" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GarbageCollect</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a72e0b41c153bf56864275c2c4a67b4f3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GeneratePkgFile</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1ae79ade032fd3ba9771924d241f5cfbc2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GetAssetServerUrl</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1af05a1e3810c7794a76fd3f9d3eb8d4fb" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GetBoneAnimProviderFileNameByID</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a5e353cd1db8ae1f2342de22cf97b1b90" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GetBoneAnimProviderIDByName</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a21a6e728b570262e4220ff3885f5152e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>GetEffectFile</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1ad625d3e477d4c18685e6003b0fb4976e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>Init</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a4a40c725eb540ddc69608e2a584a88b4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadDatabase</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1aa7520d44dc3cce19da928887524281b6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadEffectFile</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a06398510a7ee75dcbef0be4920363fb9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadFont</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1aae393441010f77173a662a5c7ad909fa" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadImageFont</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1abd2af1e6d2a5414ab1a9f8f4952543d3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadParaX</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1aa51b2627ecb0dd918bb3010f29f24a13" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadRenderTarget</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a774c8a6264c41dd393b955bb8e618646" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadSound</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a997b70f814b890c284ec6c28113b5f5d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadSpriteFrame</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1ab7ce028375ab020e16d8b37cc2a85376" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadStaticMesh</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1ab1f148feddf4a43b27d3a00847b403b3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>LoadTexture</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a617c8a26eaa8c72f5e944550106d6d18" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>OpenArchive</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1ad491b0aade4b60ca5ea11f548ba88f22" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>OpenArchive2</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a76ef47e692ffb046abcfbbf36f895f76" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>OpenArchiveEx</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a2f21158554c1be759090178f7a765d7f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>PrintToFile</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1acb8f29005912715027e044c13202a6da" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>Refresh</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a5f22926d97e07fb9f8f056b075bda276" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>SetAssetServerUrl</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a02aa0c1c1860227cb708b84b3fd8afb9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>Unload</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1a645ec4fd3611f559f989567b875a296a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>UnloadAll</name></member>
      <member refid="class_para_scripting_1_1_para_asset_1afefbdb611615b6346561485e91fd11a2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAsset</scope><name>UnloadDatabase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
