<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_para_scripting_block_world_8cpp" kind="file" language="C++">
    <compoundname>ParaScriptingBlockWorld.cpp</compoundname>
    <includes local="yes">ParaEngine.h</includes>
    <includes local="yes">BlockEngine/BlockWorld.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">array</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">bitset</includes>
    <includes local="yes">IObjectScriptingInterface.h</includes>
    <includes local="yes">IAttributeFields.h</includes>
    <includes local="yes">util/mutex.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockTemplate.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockCommon.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockConfig.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockCoordinate.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockIndex.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockModel.h</includes>
    <includes local="yes">ShapeAABB.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockChunk.h</includes>
    <includes local="no">set</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/RenderableChunk.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockRenderTask.h</includes>
    <includes local="no">mutex</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockReadWriteLock.h</includes>
    <includes local="no">thread</includes>
    <includes local="no">condition_variable</includes>
    <includes local="yes">WorldInfo.h</includes>
    <includes local="yes">BlockEngine/BlockWorldManager.h</includes>
    <includes local="no">string</includes>
    <includes local="yes">BlockEngine/BlockWorldClient.h</includes>
    <includes local="yes">D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockWorld.h</includes>
    <includes local="yes">effect_file.h</includes>
    <includes refid="_para_scripting_block_world_8h" local="yes">ParaScriptingBlockWorld.h</includes>
    <includes local="yes">lua.h</includes>
    <includes local="no">luabind/luabind.hpp</includes>
    <includes local="no">luabind/object.hpp</includes>
    <includes local="yes">memdebug.h</includes>
    <incdepgraph>
      <node id="244">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockRenderTask.h</label>
      </node>
      <node id="221">
        <label>ParaScriptBindings/ParaScriptingBlockWorld.cpp</label>
        <link refid="_para_scripting_block_world_8cpp"/>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
      </node>
      <node id="235">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockConfig.h</label>
      </node>
      <node id="241">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockChunk.h</label>
      </node>
      <node id="246">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockReadWriteLock.h</label>
      </node>
      <node id="258">
        <label>lua.h</label>
      </node>
      <node id="228">
        <label>stdint.h</label>
      </node>
      <node id="231">
        <label>IAttributeFields.h</label>
      </node>
      <node id="233">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockTemplate.h</label>
      </node>
      <node id="222">
        <label>ParaEngine.h</label>
      </node>
      <node id="238">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockIndex.h</label>
      </node>
      <node id="251">
        <label>string</label>
      </node>
      <node id="230">
        <label>IObjectScriptingInterface.h</label>
      </node>
      <node id="226">
        <label>map</label>
      </node>
      <node id="227">
        <label>unordered_set</label>
      </node>
      <node id="240">
        <label>ShapeAABB.h</label>
      </node>
      <node id="232">
        <label>util/mutex.h</label>
      </node>
      <node id="252">
        <label>BlockEngine/BlockWorldClient.h</label>
      </node>
      <node id="250">
        <label>BlockEngine/BlockWorldManager.h</label>
      </node>
      <node id="260">
        <label>luabind/object.hpp</label>
      </node>
      <node id="248">
        <label>condition_variable</label>
      </node>
      <node id="229">
        <label>bitset</label>
      </node>
      <node id="249">
        <label>WorldInfo.h</label>
      </node>
      <node id="256">
        <label>ParaScriptingGlobal.h</label>
        <link refid="_para_scripting_global_8h_source"/>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>luabind/luabind.hpp</label>
      </node>
      <node id="261">
        <label>memdebug.h</label>
      </node>
      <node id="224">
        <label>vector</label>
      </node>
      <node id="253">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockWorld.h</label>
      </node>
      <node id="239">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockModel.h</label>
      </node>
      <node id="236">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockCoordinate.h</label>
      </node>
      <node id="225">
        <label>array</label>
      </node>
      <node id="254">
        <label>effect_file.h</label>
      </node>
      <node id="237">
        <label>math.h</label>
      </node>
      <node id="243">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/RenderableChunk.h</label>
      </node>
      <node id="234">
        <label>D:/NPLRuntime/Client/trunk/ParaEngineClient/BlockEngine/BlockCommon.h</label>
      </node>
      <node id="245">
        <label>mutex</label>
      </node>
      <node id="257">
        <label>util/LogService.h</label>
      </node>
      <node id="247">
        <label>thread</label>
      </node>
      <node id="255">
        <label>ParaScriptingBlockWorld.h</label>
        <link refid="_para_scripting_block_world_8h_source"/>
        <childnode refid="256" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>set</label>
      </node>
      <node id="223">
        <label>BlockEngine/BlockWorld.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_para_scripting_block_world_8cpp_1a15284b2683406f1e78d2b4417d104bca" prot="public" static="no">
        <name>CUSTOM_BLOCK_ID_BEGIN</name>
        <initializer>2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>user defined block index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="16" column="9" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_para_scripting_block_world_8cpp_1a53e267545ff49dcca894e33bac7a8fc2" prot="public" static="no">
        <name>GETBLOCKWORLD</name>
        <param><defname>pWorld</defname></param>
        <param><defname>pWorld_</defname></param>
        <initializer>PE_ASSERT(luabind::type(pWorld_) == LUA_TLIGHTUSERDATA); \
	lua_State* L = pWorld_.interpreter(); \
	pWorld_.push(L); \
	CBlockWorld* pWorld = (CBlockWorld*)lua_touserdata(L, -1); \
	lua_pop(L, 1);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="32" column="9" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1a92caa67a14ea7da721bb7d7fac2d6941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL void</type>
        <definition>PE_CORE_DECL void ParaBlockWorld_SetBlockId</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z, uint32_t templateId)</argsstring>
        <name>ParaBlockWorld_SetBlockId</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>templateId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="481" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1aeb8c7518d2ecd534c74ef0f792fa47cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL uint32_t</type>
        <definition>PE_CORE_DECL uint32_t ParaBlockWorld_GetBlockId</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z)</argsstring>
        <name>ParaBlockWorld_GetBlockId</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="486" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1a9d8578bb5eff528083b7832e01cf24d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL void</type>
        <definition>PE_CORE_DECL void ParaBlockWorld_SetBlockData</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z, uint32_t data)</argsstring>
        <name>ParaBlockWorld_SetBlockData</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="491" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="491" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1a485c6f09f78435a0f6ef5748712ebf35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL uint32_t</type>
        <definition>PE_CORE_DECL uint32_t ParaBlockWorld_GetBlockData</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z)</argsstring>
        <name>ParaBlockWorld_GetBlockData</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="496" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1a3120153afa4d83b8bcb25324de03fd47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL int</type>
        <definition>PE_CORE_DECL int ParaBlockWorld_FindFirstBlock</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z, uint16_t nSide, uint32_t max_dist, uint32_t attrFilter, int nCategoryID)</argsstring>
        <name>ParaBlockWorld_FindFirstBlock</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nSide</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_dist</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>attrFilter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCategoryID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="501" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="501" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="_para_scripting_block_world_8cpp_1abb22f757df9fee8b2db181478c9fce1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PE_CORE_DECL int</type>
        <definition>PE_CORE_DECL int ParaBlockWorld_GetFirstBlock</definition>
        <argsstring>(void *pWorld, uint16_t x, uint16_t y, uint16_t z, int nBlockId, uint16_t nSide, uint32_t max_dist)</argsstring>
        <name>ParaBlockWorld_GetFirstBlock</name>
        <param>
          <type>void *</type>
          <declname>pWorld</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBlockId</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nSide</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp" line="506" column="1" bodyfile="ParaScriptBindings/ParaScriptingBlockWorld.cpp" bodystart="506" bodyend="509"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class:<sp/>ParaBlockWorld</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>LiXizhi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Emails:<sp/><sp/>LiXizhi@yeah.net</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Date:<sp/><sp/><sp/><sp/>2014.2.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desc:<sp/>exposed<sp/>in<sp/>ParaScripting4.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ParaEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BlockEngine/BlockWorld.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BlockEngine/BlockWorldManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BlockEngine/BlockWorldClient.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ParaScriptingBlockWorld.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor">#define<sp/>CUSTOM_BLOCK_ID_BEGIN<sp/>2000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lua.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;luabind/luabind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;luabind/object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_para_scripting" kindref="compound">ParaScripting</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_para_engine" kindref="compound">ParaEngine</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceluabind" kindref="compound">luabind</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memdebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_)<sp/><sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PE_ASSERT(luabind::type(pWorld_)<sp/>==<sp/>LUA_TLIGHTUSERDATA);<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>lua_State*<sp/>L<sp/>=<sp/>pWorld_.interpreter();<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>pWorld_.push(L);<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CBlockWorld*<sp/>pWorld<sp/>=<sp/>(CBlockWorld*)lua_touserdata(L,<sp/>-1);<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>lua_pop(L,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">ParaScripting::ParaBlockWorld::ParaBlockWorld()</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">ParaScripting::ParaBlockWorld::~ParaBlockWorld()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">luabind::object<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a2454dabae842e909f55fa5255887438b" kindref="member">ParaScripting::ParaBlockWorld::GetWorld</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>sWorldName_)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sWorldName;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(sWorldName_)<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sWorldName<sp/>=<sp/>object_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&gt;<sp/>(sWorldName_);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>pWorld<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sWorldName.empty()<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pWorld<sp/>=<sp/>CBlockWorldManager::GetSingleton()-&gt;CreateGetBlockWorld(sWorldName);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pWorld<sp/>=<sp/>BlockWorldClient::GetInstance();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>sWorldName_.interpreter();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>lua_pushlightuserdata(L,<sp/>pWorld);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>luabind::object<sp/>ret(luabind::from_stack(L,<sp/>-1));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>lua_pop(L,<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1af0052e7f25fb88e1a39c40dcb9dd5477" kindref="member">ParaScripting::ParaBlockWorld::EnterWorld</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sWorldDir)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;EnterWorld(sWorldDir,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1ab52ef4329f531b1c6869727a02296a46" kindref="member">ParaScripting::ParaBlockWorld::LeaveWorld</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;LeaveWorld();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1a0e1584c1e043f9941badf6853b8a930a" kindref="member">ParaScripting::ParaBlockWorld::RegisterBlockTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>templateId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>params)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RegisterBlockTemplate_(pWorld,<sp/>templateId,<sp/>params);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ParaScripting::ParaBlockWorld::RegisterBlockTemplate_(CBlockWorld*<sp/>pWorld,<sp/>uint16_t<sp/>templateId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>params)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>attFlag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>category_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sModelName,<sp/>sNormalMap,<sp/>sTexture0,<sp/>sTexture2,<sp/>sTexture3,<sp/>sTexture4;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Color<sp/>dwMapColor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOpacity<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>associated_blockid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTorchLight<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fSpeedReduction<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsUpdating<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bProvidePower<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bCustomBlockModel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params)<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attFlag<sp/>=<sp/>(uint32_t)(object_cast&lt;double&gt;<sp/>(params));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params)<sp/>==<sp/>LUA_TTABLE)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;IsUpdating&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TBOOLEAN)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bIsUpdating<sp/>=<sp/>object_cast&lt;bool&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;IsUpdating&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type(params[</highlight><highlight class="stringliteral">&quot;customBlockModel&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TBOOLEAN)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bCustomBlockModel<sp/>=<sp/>object_cast&lt;bool&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;customBlockModel&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;attFlag&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attFlag<sp/>=<sp/>(uint32_t)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;attFlag&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;modelName&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sModelName<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;modelName&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;normalMap&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sNormalMap<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;normalMap&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;categoryID&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>category_id<sp/>=<sp/>(uint16_t)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;categoryID&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;associated_blockid&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>associated_blockid<sp/>=<sp/>(uint16_t)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;associated_blockid&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;associated_blockid&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>associated_blockid<sp/>=<sp/>(uint16_t)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;associated_blockid&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;ProvidePower&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TBOOLEAN)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bProvidePower<sp/>=<sp/>object_cast&lt;bool&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;ProvidePower&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;torchLightValue&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nTorchLight<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;torchLightValue&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;speedReduction&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSpeedReduction<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;speedReduction&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;texture&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sTexture0<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;texture&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;texture2&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sTexture2<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;texture2&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;texture3&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sTexture3<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;texture3&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;texture4&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sTexture4<sp/>=<sp/>object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;texture4&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;mapcolor&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dwMapColor<sp/>=<sp/>Color::FromString(object_cast&lt;const<sp/>char*&gt;(params[</highlight><highlight class="stringliteral">&quot;mapcolor&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(params[</highlight><highlight class="stringliteral">&quot;opacity&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOpacity<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(object_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>(params[</highlight><highlight class="stringliteral">&quot;opacity&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bIsUpdating)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockTemplate*<sp/>pTemplate<sp/>=<sp/>pWorld-&gt;GetBlockTemplate(templateId);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplate)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sModelName.empty())</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;LoadModel(sModelName);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sNormalMap.empty())</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetNormalMap(sNormalMap.c_str());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture0.empty())</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture0.c_str());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture2.empty())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture2.c_str(),<sp/>2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture3.empty())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture3.c_str(),<sp/>3);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture4.empty())</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture4.c_str(),<sp/>4);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fSpeedReduction<sp/>&lt;<sp/>1.f)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetSpeedReductionPercent(fSpeedReduction);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nOpacity&gt;0)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetLightOpacity(nOpacity);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((DWORD)dwMapColor<sp/>!=0)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetMapColor(dwMapColor);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockTemplate*<sp/>pTemplate<sp/>=<sp/>pWorld-&gt;GetBlockTemplate(templateId);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplate!=NULL<sp/>&amp;&amp;<sp/>templateId<sp/>&gt;=<sp/>CUSTOM_BLOCK_ID_BEGIN)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>allow<sp/>user<sp/>defined<sp/>custom<sp/>block<sp/>to<sp/>be<sp/>overridden</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>all<sp/>chunks<sp/>dirty,<sp/>to<sp/>reflect<sp/>the<sp/>changes.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pWorld-&gt;ClearBlockRenderCache();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;Init(attFlag,<sp/>category_id);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate<sp/>=<sp/>pWorld-&gt;RegisterTemplate(templateId,<sp/>attFlag,<sp/>category_id);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplate)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sModelName.empty())</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;LoadModel(sModelName);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sNormalMap.empty())</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetNormalMap(sNormalMap.c_str());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture0.empty())</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture0.c_str());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture2.empty())</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture2.c_str(),<sp/>2);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture3.empty())</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture3.c_str(),<sp/>3);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sTexture4.empty())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTexture0(sTexture4.c_str(),<sp/>4);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(associated_blockid<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetAssociatedBlock(associated_blockid);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bProvidePower)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;setProvidePower(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTorchLight<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetTorchLight(nTorchLight);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fSpeedReduction<sp/>&lt;<sp/>1.f)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetSpeedReductionPercent(fSpeedReduction);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nOpacity&gt;0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetLightOpacity(nOpacity);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((DWORD)dwMapColor<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;SetMapColor(dwMapColor);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCustomBlockModel<sp/>&amp;&amp;<sp/>type(params[</highlight><highlight class="stringliteral">&quot;models&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TTABLE)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>models<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;models&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxDataId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMinDataId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>(type(models[i])<sp/>==<sp/>LUA_TTABLE);<sp/>++i)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>model<sp/>=<sp/>models[i];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(model[</highlight><highlight class="stringliteral">&quot;assetfile&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>assetfile<sp/>=<sp/>object_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&gt;(model[</highlight><highlight class="stringliteral">&quot;assetfile&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4<sp/>mat<sp/>=<sp/>Matrix4::IDENTITY;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(model[</highlight><highlight class="stringliteral">&quot;transform&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TSTRING)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>transform<sp/>=<sp/>object_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&gt;(model[</highlight><highlight class="stringliteral">&quot;transform&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(transform.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f&quot;</highlight><highlight class="normal">,<sp/>&amp;mat._11,<sp/>&amp;mat._12,<sp/>&amp;mat._13,<sp/>&amp;mat._21,<sp/>&amp;mat._22,<sp/>&amp;mat._23,<sp/>&amp;mat._31,<sp/>&amp;mat._32,<sp/>&amp;mat._33,<sp/>&amp;mat._41,<sp/>&amp;mat._42,<sp/>&amp;mat._43)<sp/>&gt;=<sp/>12)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat._14<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat._24<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat._34<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat._44<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>Matrix4::IDENTITY;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(model[</highlight><highlight class="stringliteral">&quot;facing&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fFacing<sp/>=<sp/>(float)(object_cast&lt;double&gt;<sp/>(model[</highlight><highlight class="stringliteral">&quot;facing&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fFacing<sp/>!=<sp/>0.f)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4<sp/>matRot;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParaMatrixRotationY(&amp;matRot,<sp/>fFacing);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat<sp/>*=<sp/>matRot;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTextureIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(model[</highlight><highlight class="stringliteral">&quot;texture_index&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nTextureIndex<sp/>=<sp/>(int)(object_cast&lt;double&gt;<sp/>(model[</highlight><highlight class="stringliteral">&quot;texture_index&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(model[</highlight><highlight class="stringliteral">&quot;id_data&quot;</highlight><highlight class="normal">])<sp/>==<sp/>LUA_TNUMBER)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_data<sp/>=<sp/>(int)(object_cast&lt;double&gt;<sp/>(model[</highlight><highlight class="stringliteral">&quot;id_data&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_data<sp/>&gt;<sp/>nMaxDataId)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMaxDataId<sp/>=<sp/>id_data;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMinDataId<sp/>==<sp/>-1<sp/>||<sp/>nMinDataId<sp/>&gt;<sp/>id_data)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMinDataId<sp/>=<sp/>id_data;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;CreateGetBlockModel(id_data).LoadModel(pTemplate,<sp/>assetfile,<sp/>mat,<sp/>nTextureIndex);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMaxDataId<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMinDataId<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>0<sp/>must<sp/>contains<sp/>the<sp/>a<sp/>valid<sp/>face<sp/>count<sp/>since<sp/>it<sp/>is<sp/>used<sp/>to<sp/>estimate<sp/>render<sp/>buffer<sp/>size<sp/>in<sp/>some<sp/>cases.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;GetBlockModel(0).CloneRenderData(pTemplate-&gt;GetBlockModel(nMinDataId));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplate-&gt;MakeCustomLinearModelProvider(nMaxDataId<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1ac8f2c1c16af6a04de2a818c74a41489e" kindref="member">ParaScripting::ParaBlockWorld::SetBlockWorldYOffset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SetVerticalOffset(offset);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1ac7afc8be7de5f2a12a41d56b30c959f6" kindref="member">ParaScripting::ParaBlockWorld::SetBlockId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint32_t<sp/>templateId)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SetBlockTemplateIdByIdx(x,<sp/>y,<sp/>z,<sp/>templateId);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">uint32_t<sp/><ref refid="class_para_scripting_1_1_para_block_world_1aa46e6a5f0b57a14ae66b6eb327416e49" kindref="member">ParaScripting::ParaBlockWorld::GetBlockId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pWorld-&gt;GetBlockTemplateIdByIdx(x,y,z);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1af204ce2adcfbda9bab527a7197d4beaa" kindref="member">ParaScripting::ParaBlockWorld::SetBlockData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint32_t<sp/>data)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SetBlockUserDataByIdx(x,<sp/>y,<sp/>z,<sp/>data);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">uint32_t<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a948958ffa30eac507f056728724cdf33" kindref="member">ParaScripting::ParaBlockWorld::GetBlockData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pWorld-&gt;GetBlockUserDataByIdx(x,y,z);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">luabind::object<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a18091d2654132df02e9256a94182ca6b" kindref="member">ParaScripting::ParaBlockWorld::GetBlocksInRegion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>int32_t<sp/>startChunkX,<sp/>int32_t<sp/>startChunkY,<sp/>int32_t<sp/>startChunkZ,<sp/>int32_t<sp/>endChunkX,<sp/>int32_t<sp/>endChunkY,<sp/>int32_t<sp/>endChunkZ,<sp/>uint32_t<sp/>matchType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>result)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1a5b0018cb013c25933eca2b9337a3c2d0" kindref="member">ParaScripting::ParaBlockWorld::SetBlockWorldSunIntensity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SetSunIntensity(value);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1a9c8065a108fde85944fb5f6912cdc239" kindref="member">ParaScripting::ParaBlockWorld::FindFirstBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint16_t<sp/>nSide<sp/></highlight><highlight class="comment">/*=<sp/>4*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>max_dist<sp/></highlight><highlight class="comment">/*=<sp/>32*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>attrFilter<sp/></highlight><highlight class="comment">/*=<sp/>0xffffffff*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCategoryID<sp/></highlight><highlight class="comment">/*=<sp/>-1*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pWorld-&gt;FindFirstBlock(x,<sp/>y,<sp/>z,<sp/>nSide,<sp/>max_dist,<sp/>attrFilter,<sp/>nCategoryID);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1aa275b51358be7adc930b4e9dccc7e801" kindref="member">ParaScripting::ParaBlockWorld::GetFirstBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockId,<sp/>uint16_t<sp/>nSide<sp/></highlight><highlight class="comment">/*=<sp/>4*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>max_dist<sp/></highlight><highlight class="comment">/*=<sp/>32*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pWorld-&gt;GetFirstBlock(x,<sp/>y,<sp/>z,<sp/>nBlockId,<sp/>nSide,<sp/>max_dist);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1a84fc474251b4754213866f9088e39f4d" kindref="member">ParaScripting::ParaBlockWorld::SetTemplateTexture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>templateId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SetTemplateTexture(templateId,<sp/>fileName);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">luabind::object<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a4c9dcc2852462112fd8d72df517ead97" kindref="member">ParaScripting::ParaBlockWorld::GetVisibleChunkRegion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>result)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pWorld)<sp/>&amp;&amp;<sp/>pWorld-&gt;IsInBlockWorld())</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(result)<sp/>==<sp/>LUA_TTABLE)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int16x3<sp/>minChunkId<sp/>=<sp/>pWorld-&gt;GetMinActiveChunkId();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>maxChunkX<sp/>=<sp/>(int32_t)minChunkId.x<sp/>+<sp/>pWorld-&gt;GetActiveChunkDim()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>maxChunkY<sp/>=<sp/>(int32_t)minChunkId.y<sp/>+<sp/>pWorld-&gt;GetActiveChunkDimY()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>maxChunkZ<sp/>=<sp/>(int32_t)minChunkId.z<sp/>+<sp/>pWorld-&gt;GetActiveChunkDim()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minChunkId.x<sp/>&lt;<sp/>0)<sp/>minChunkId.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minChunkId.y<sp/>&lt;<sp/>0)<sp/>minChunkId.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minChunkId.z<sp/>&lt;<sp/>0)<sp/>minChunkId.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxChunkX<sp/>&gt;<sp/>0xffff)<sp/>maxChunkX<sp/>=<sp/>0xffff;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxChunkY<sp/>&gt;<sp/>BlockConfig::g_regionChunkDimY)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxChunkY<sp/>=<sp/>BlockConfig::g_regionChunkDimY<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxChunkZ<sp/>&gt;<sp/>0xffff)<sp/>maxChunkZ<sp/>=<sp/>0xffff;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;minX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>minChunkId.x;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;minY&quot;</highlight><highlight class="normal">]<sp/>=<sp/>minChunkId.y;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;minZ&quot;</highlight><highlight class="normal">]<sp/>=<sp/>minChunkId.z;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;maxX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>maxChunkX;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;maxY&quot;</highlight><highlight class="normal">]<sp/>=<sp/>maxChunkY;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;maxZ&quot;</highlight><highlight class="normal">]<sp/>=<sp/>maxChunkZ;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">luabind::object<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a11eb3989d07edc2abe009b9b7476cc55" kindref="member">ParaScripting::ParaBlockWorld::Pick</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rayX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rayY,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rayZ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dirX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dirY,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dirZ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fMaxDistance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>result,<sp/>uint32_t<sp/>filter<sp/></highlight><highlight class="comment">/*=<sp/>0xffffffff*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pWorld)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PickResult<sp/>pickResult;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>rayOrig(rayX,<sp/>rayY,<sp/>rayZ);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>rayDir(dirX,<sp/>dirY,<sp/>dirZ);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pWorld-&gt;Pick(rayOrig,<sp/>rayDir,<sp/>fMaxDistance,<sp/>pickResult,<sp/>filter))</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(result)<sp/>==<sp/>LUA_TTABLE)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.X;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.Y;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.Z;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;blockX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.BlockX;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;blockY&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.BlockY;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;blockZ&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.BlockZ;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;side&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.Side;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pickResult.Distance;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type(result)<sp/>==<sp/>LUA_TTABLE)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">]<sp/>=<sp/>fMaxDistance<sp/>+<sp/>10000;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">luabind::object<sp/><ref refid="class_para_scripting_1_1_para_block_world_1a0188ccc424dd74519bc218b174223156" kindref="member">ParaScripting::ParaBlockWorld::MousePick</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fMaxDistance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>result,<sp/>uint32_t<sp/>filter<sp/></highlight><highlight class="comment">/*=<sp/>0xffffffff*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>OUTPUT_LOG(</highlight><highlight class="stringliteral">&quot;MousePick<sp/>Not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1afe41f4f613548194ebd2898f6adc3c46" kindref="member">ParaScripting::ParaBlockWorld::SelectBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSelect)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectBlock1(pWorld_,<sp/>x,<sp/>y,<sp/>z,<sp/>isSelect,<sp/>0);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParaScripting::ParaBlockWorld::SelectBlock1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSelect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nGroupID)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSelect)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pWorld-&gt;SelectBlock(x,<sp/>y,<sp/>z,<sp/>nGroupID);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pWorld-&gt;DeselectBlock(x,<sp/>y,<sp/>z,<sp/>nGroupID);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1a81daa75b6e6d89b24e4a86e40237c42d" kindref="member">ParaScripting::ParaBlockWorld::DeselectAllBlock1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nGroupID)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;DeselectAllBlock(nGroupID);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParaScripting::ParaBlockWorld::DeselectAllBlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>DeselectAllBlock1(pWorld_,<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1aa6463dd92db78d9eb4fa66ad536f8197" kindref="member">ParaScripting::ParaBlockWorld::SetDamagedBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>OUTPUT_LOG(</highlight><highlight class="stringliteral">&quot;SetDamagedBlock<sp/>Not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1aac890e69224bf5dc76f84cf326a1f6f6" kindref="member">ParaScripting::ParaBlockWorld::SetDamageDegree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>damagedDegree)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>OUTPUT_LOG(</highlight><highlight class="stringliteral">&quot;SetDamagedBlock<sp/>Not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1ab67ba782beada5535ccf90843e3d0dcd" kindref="member">ParaScripting::ParaBlockWorld::LoadRegion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;CreateGetRegion(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1af4cbbef6cd08d3f544bed36052b8f530" kindref="member">ParaScripting::ParaBlockWorld::UnloadRegion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;UnloadRegion(x,<sp/>y,<sp/>z,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_block_world_1ac806dfca704501c6744bb80764dac9f4" kindref="member">ParaScripting::ParaBlockWorld::GetVersion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParaScripting::ParaBlockWorld::SaveBlockWorld(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>saveToTemp)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>pWorld-&gt;SaveToFile(saveToTemp);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaScripting::ParaAttributeObject</ref><sp/><ref refid="class_para_scripting_1_1_para_block_world_1aa123a4c730e23e59a7d62841c4fba610" kindref="member">ParaScripting::ParaBlockWorld::GetBlockAttributeObject</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">&amp;<sp/>pWorld_)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>GETBLOCKWORLD(pWorld,<sp/>pWorld_);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref>(pWorld);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>LuaJit,<sp/>only<sp/>for<sp/>function<sp/>that<sp/>maybe<sp/>called<sp/>millions<sp/>of<sp/>time<sp/>per<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParaBlockWorld_SetBlockId(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint32_t<sp/>templateId)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CBlockWorld*)pWorld)-&gt;SetBlockTemplateIdByIdx(x,<sp/>y,<sp/>z,<sp/>templateId);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/>uint32_t<sp/>ParaBlockWorld_GetBlockId(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((CBlockWorld*)pWorld)-&gt;GetBlockTemplateIdByIdx(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ParaBlockWorld_SetBlockData(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint32_t<sp/>data)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CBlockWorld*)pWorld)-&gt;SetBlockUserDataByIdx(x,<sp/>y,<sp/>z,<sp/>data);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/>uint32_t<sp/>ParaBlockWorld_GetBlockData(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((CBlockWorld*)pWorld)-&gt;GetBlockUserDataByIdx(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ParaBlockWorld_FindFirstBlock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/>uint16_t<sp/>nSide<sp/></highlight><highlight class="comment">/*=<sp/>4*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>max_dist<sp/></highlight><highlight class="comment">/*=<sp/>32*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>attrFilter<sp/></highlight><highlight class="comment">/*=<sp/>0xffffffff*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCategoryID<sp/></highlight><highlight class="comment">/*=<sp/>-1*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((CBlockWorld*)pWorld)-&gt;FindFirstBlock(x,<sp/>y,<sp/>z,<sp/>nSide,<sp/>max_dist,<sp/>attrFilter,<sp/>nCategoryID);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>PE_CORE_DECL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ParaBlockWorld_GetFirstBlock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pWorld,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockId,<sp/>uint16_t<sp/>nSide<sp/></highlight><highlight class="comment">/*=<sp/>4*/</highlight><highlight class="normal">,<sp/>uint32_t<sp/>max_dist<sp/></highlight><highlight class="comment">/*=<sp/>32*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((CBlockWorld*)pWorld)-&gt;GetFirstBlock(x,<sp/>y,<sp/>z,<sp/>nBlockId,<sp/>nSide,<sp/>max_dist);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="ParaScriptBindings/ParaScriptingBlockWorld.cpp"/>
  </compounddef>
</doxygen>
