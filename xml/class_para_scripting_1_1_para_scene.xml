<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_para_scripting_1_1_para_scene" kind="class" language="C++" prot="public">
    <compoundname>ParaScripting::ParaScene</compoundname>
    <includes refid="_para_scripting_scene_8h" local="no">ParaScriptingScene.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a04a69b1b68c9c967d7ee14d1e21023d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaScene::GetAttributeObject</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the global scene. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1295" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2395" bodyend="2398"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a58c5a1bbd63cf160fbf5bbdcdfe7e2e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaScripting::ParaAttributeObject ParaScripting::ParaScene::GetAttributeObject1</definition>
        <argsstring>(const char *name)</argsstring>
        <name>GetAttributeObject1</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1296" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2400" bodyend="2403"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1af7c4fa19f7c108ead1095585e6b53ed5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetAttributeObject_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObject_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for API exportation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1298" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2405" bodyend="2408"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1af64c1571a338d393516bd97d03d0f921" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaScene::GetAttributeObjectSky</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObjectSky</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the current sky object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1300" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2410" bodyend="2413"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad8231159da2c7be9b959049726d70d57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetAttributeObjectSky_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObjectSky_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for API exportation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1302" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2415" bodyend="2418"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a76297d7a1a07fea6750782e02a8acaf6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaScene::GetAttributeObjectPlayer</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObjectPlayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the current player. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1304" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2419" bodyend="2422"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a08938aa24ffbd3ecc7e8394d91a21161" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetAttributeObjectPlayer_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObjectPlayer_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for API exportation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1306" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2423" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a5e85601385bd5a3b6eaebbb9645ff97e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaScene::GetAttributeObjectOcean</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObjectOcean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the global ocean manager. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1308" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2428" bodyend="2431"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a83c6b8bbcd9a9e69c62bba1fbf5b4e78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetAttributeObjectOcean_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObjectOcean_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for API exportation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1310" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2433" bodyend="2436"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a2daaa6642a460e0096c735e4b14183a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref></type>
        <definition>ParaAttributeObject ParaScripting::ParaScene::GetAttributeObjectSunLight</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObjectSunLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the sun light . </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1312" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2438" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a7ee13d77c952c229e04d67a3b5c6fe8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetAttributeObjectSunLight_</definition>
        <argsstring>(ParaAttributeObject &amp;output)</argsstring>
        <name>GetAttributeObjectSunLight_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_attribute_object" kindref="compound">ParaAttributeObject</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for API exportation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1314" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2443" bodyend="2446"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a16a79f61e5e0190660db0c3d3cae2195" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetObject</definition>
        <argsstring>(const char *strObjName)</argsstring>
        <name>GetObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the scene object by name. currently, the object must be global, in order to be found by its name. <simplesect kind="remark"><para>: if local mesh&apos;s name begins with &quot;g_&quot;, it can also be retrieved by calling this function. however, if a global object has the same name, the global object is always returned instead of the local mesh. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjName</parametername>
</parameternamelist>
<parameterdescription>
<para>the format of the name is as below: strObjName := [&lt;_type&gt;]string <linebreak/>
 _type := managed_loader | OPC | NPC | player | zone | portal <linebreak/>
e.g. strObjName = &quot;creatures1&quot; or &quot;&lt;managed_loader&gt;sceneloader1&quot; or &quot;&lt;player&gt;&quot;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>extract the type information from the name.</para><para>search for each type </para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1326" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1569" bodyend="1627"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a395b7cc09599b5e6aa58a09e20ce6706" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaScene::GetObject5</definition>
        <argsstring>(int nID)</argsstring>
        <name>GetObject5</name>
        <param>
          <type>int</type>
          <declname>nID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get an object by its ID </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1329" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1637" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1acace224384716b526b07736f83498e5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::CheckExist</definition>
        <argsstring>(int nID)</argsstring>
        <name>CheckExist</name>
        <param>
          <type>int</type>
          <declname>nID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1332" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1642" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a99e8604323519e8a4d592ebe9e04df70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetObject3</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>GetObject3</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the first local object,whose position is very close to vPos. This function will search for the first (local mesh) object throughout the hierachy of the scene. this function is kind of slow, please do not call on a per frame basis. Use <ref refid="class_para_scripting_1_1_para_scene_1aac70e25953f2e7c241c6d187bf71a602" kindref="member">GetObjectByViewBox()</ref> to get an object faster. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vPos</parametername>
</parameternamelist>
<parameterdescription>
<para>world position of the local mesh object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fEpsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>if a mesh is close enough to vPos within this value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1341" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1629" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a38ad755d85cbeb81f249838217603561" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetObject4</definition>
        <argsstring>(float x, float y, float z, float fEpsilon)</argsstring>
        <name>GetObject4</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fEpsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the first object that matches the position within fEpsilon, which is usually 0.01f </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1344" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1633" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a857fc3ac49720731e445fc1abd02ff02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetObject_</definition>
        <argsstring>(ParaObject *pOut, const char *strObjName)</argsstring>
        <name>GetObject_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strObjName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. this is solely for exporting API. and should not be used from the scripting interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1347" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1564" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad62187324eb1ba383e020056a1880b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetPlayer</definition>
        <argsstring>()</argsstring>
        <name>GetPlayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current player. same as <ref refid="class_para_scripting_1_1_para_scene_1a16a79f61e5e0190660db0c3d3cae2195" kindref="member">ParaScene.GetObject</ref>(&quot;&lt;player&gt;&quot;). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1350" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1647" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a75e181141320c2e3b5266eb6128c595e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::GetPlayer_</definition>
        <argsstring>(ParaObject *pOut)</argsstring>
        <name>GetPlayer_</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> *</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. this is solely for exporting API. and should not be used from the scripting interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1352" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1651" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a0077411cf929bef9c1b94bd53764454e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetNextObject</definition>
        <argsstring>(ParaObject &amp;obj)</argsstring>
        <name>GetNextObject</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the next scene object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the object whose next object is retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the next object. the returned object is invalid if there is only one object left. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1359" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1550" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a54ad4cf5b139a1ba702e36bd59fd0ba2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::CreateWorld</definition>
        <argsstring>(const char *sWorldName, float fWorldSize, const char *sConfigFile)</argsstring>
        <name>CreateWorld</name>
        <param>
          <type>const char *</type>
          <declname>sWorldName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fWorldSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sConfigFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new parallel world of a given size. When this function is called, it will replace previously created world of the same name. Currently only a single world can be created at any given time. In future, we will support hosting several world simultaneously. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sWorldName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the world to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fWorldSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the world in meters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sConfigFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file name of the configuration file. Currently it is the same as the terrain configuration file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>the quad tree depth is automatically calculated. The smallest quad tree tile is of size 128 meters. </para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1369" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1655" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a617474d0ec9bdb3525fbe534bfce9f2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reset the scene to blank. this function is NOT automatically called when a new isolated world is created. so one need to call <ref refid="class_para_scripting_1_1_para_scene_1a617474d0ec9bdb3525fbe534bfce9f2c" kindref="member">Reset()</ref> when it wants to change the world, otherwise the new world will be merged into the previous world. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_scene_1a54ad4cf5b139a1ba702e36bd59fd0ba2" kindref="member">CreateWorld()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1377" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1679" bodyend="1682"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ab0a9febc49910f984215a68a9ff96da4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateManagedLoader</definition>
        <argsstring>(const char *sLoaderName)</argsstring>
        <name>CreateManagedLoader</name>
        <param>
          <type>const char *</type>
          <declname>sLoaderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a managed loader for dynamic scene object loading and unloading. The behavior of a managed loader is below:</para><para><itemizedlist>
<listitem><para>The child objects of a managed loader will be automatically loaded and unloaded as a single entity.</para></listitem><listitem><para>Generally only static objects are attached to a managed loader.</para></listitem><listitem><para>Different managed loaders in a <ref refid="class_para_scripting_1_1_para_scene" kindref="compound">ParaScene</ref> must have different names.</para></listitem><listitem><para>if one create a manager loader with the same name several times, the same managed loader will be returned.</para></listitem><listitem><para>the bounding box of a managed loader will be automatically calculated as new child objects are attached to it.</para></listitem><listitem><para>The current loader algorithm will linearly transverse all managed loaders in the scene to decide which scene objects to load or unload. Although the routine is executed when the CPU is free, it is good practice to keep the total number of managed loaders in a single scene low. I think a couple of thousand loaders will be fine for current hardware.</para></listitem><listitem><para>it is good practice to use managed loaders to group all static scene objects that appears in a scene. Because, it will keep the scene graph to a moderate size automatically and accelerate physics calculation, etc.</para></listitem></itemizedlist>
</para><para>The following NPL code shows typical usage of the managed loader. Generally a managed loader and its children are written in a single script file. Then, any other script can call dofile() or NPL.ActivateCopy() to run the script as many times as they like. The code however will ensure that objects managed by the loader will only be created and attached once in the game engine.There may be a setting in ParaEngine to do automatic garbage collection with managed loaders, so one may need to call the following script file often enough for the managed objects to stay active in the game scene.<linebreak/>
 local sceneLoader = <ref refid="class_para_scripting_1_1_para_scene_1a16a79f61e5e0190660db0c3d3cae2195" kindref="member">ParaScene.GetObject</ref>(&quot;&lt;managed_loader&gt;scene2&quot;); <linebreak/>
if (sceneLoader:IsValid() == true) then <linebreak/>
<ndash/> if the scene loader already exists, just attach it to the scene. <linebreak/>
ParaScene.Attach(sceneLoader); <linebreak/>
else <linebreak/>
<ndash/> if the scene loader is not created before, we will create it now <linebreak/>
sceneLoader = <ref refid="class_para_scripting_1_1_para_scene_1ab0a9febc49910f984215a68a9ff96da4" kindref="member">ParaScene.CreateManagedLoader</ref>(&quot;scene2&quot;); <linebreak/>
ParaAsset.ParaXModel(&quot;tiny&quot;, &quot;Units/Human/Peasant/peasant.x&quot;); <linebreak/>
 <ndash/> create scene objects and add them to managed loader object <linebreak/>
local player; <linebreak/>
player = <ref refid="class_para_scripting_1_1_para_scene_1a71cd753ab52761a7999eac736e263564" kindref="member">ParaScene.CreateCharacter</ref> (&quot;LiXizhi2&quot;, &quot;tiny&quot;, &quot;&quot;, false, 0.5, 0, 1.0); <linebreak/>
player:SetPosition(21758, 0, 16221); <linebreak/>
player:SnapToTerrainSurface(0); <linebreak/>
sceneLoader:AddChild(player); <linebreak/>
 <ndash/> attach all objects in the loader to the scene graph <linebreak/>
ParaScene.Attach(sceneLoader); <linebreak/>
end <linebreak/>
 <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sLoaderName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the loader. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>CManagedLoaderObject in ParaEngine reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1423" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1798" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a782a4f943aaa7712755ee6f631317929" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::CreateGlobalTerrain</definition>
        <argsstring>(float fRadius, int nDepth, const char *sHeightmapfile, float fTerrainSize, float fElevscale, int bSwapvertical, const char *sMainTextureFile, const char *sCommonTextureFile, int nMaxBlockSize, float fDetailThreshold)</argsstring>
        <name>CreateGlobalTerrain</name>
        <param>
          <type>float</type>
          <declname>fRadius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nDepth</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sHeightmapfile</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fTerrainSize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fElevscale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bSwapvertical</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sMainTextureFile</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sCommonTextureFile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nMaxBlockSize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fDetailThreshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>update the terrain tile at a given tile location. In case a world is extremely large, it can be divided into a matrix of square tiles of a given size. there is no limitation on the size of this matrix, hence the (nRow, nCol) parameter can be any integer pair. but typically, the matrix is rarely larger than 64*64. We use indexed set to save the matrix, so the memory consumption of the matrix is linearly proportionally to the number of terrain tiles created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nRow</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number in the terrain tile matrix.nRow&gt;=0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCol</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number in the terrain tile matrix.nCol&gt;=0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sConfigFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the terrain tile configuration file to be used to create the terrain at (nRow, nCol). if sConfigFile == &quot;&quot;, then the terrain at (nRow, nCol) will be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>CreateWorld(const char * sWorldName, float fWorldSize, float fTerrainTileSize); Create and set the global terrain from height map and texture files. this function can be called multiple times, in which cases previously loaded terrain will be discarded example: <ref refid="class_para_scripting_1_1_para_scene_1a782a4f943aaa7712755ee6f631317929" kindref="member">ParaScene.CreateGlobalTerrain</ref>(2048, 7, &quot;LlanoElev.png&quot;, 5.0, 15.0, 1, &quot;LlanoTex.jpg&quot;, &quot;dirt2.jpg&quot;, 64, 10.0"); </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>entire terrain size, this has doing to do with the actual terrain map size, it just prevent mobile characters from walking outside it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nDepth</parametername>
</parameternamelist>
<parameterdescription>
<para>depth of the quad tree terrain hierarchy. objects created on the terrain will be organized in a quad tree. This is the depth of the quad tree. It should not be too big. usually 7 is enough. the rest of the parameters specify the data to render the terrain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sHeightmapfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the height map used to create the terrain. It must be sized to 2*2*...*2 pixels for both height and width. so usually it is 1024*1024, 2048*2048, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fTerrainSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual terrain size in the game </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bSwapvertical</parametername>
</parameternamelist>
<parameterdescription>
<para>if one want to swap the height map data vertically. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sMainTextureFile</parametername>
</parameternamelist>
<parameterdescription>
<para>texture to be mapped to entire terrain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sCommonTextureFile</parametername>
</parameternamelist>
<parameterdescription>
<para>texture to be tiles to the entire terrain to add some details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nMaxBlockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>When doing LOD with the height map, the max block size must be smaller than this one. This will be (nMaxBlockSize*nMaxBlockSize) sized region on the height map. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fDetailThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>we will use a LOD block to approximate the terrain at its location, if the block is smaller than fDetailThreshold pixels when projected to the 2D screen. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1459" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1684" bodyend="1694"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Attach</definition>
        <argsstring>(ParaObject &amp;pObj)</argsstring>
        <name>Attach</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Automatically attach a scene object to the scene graph according to its type and position. The object can be a manager loader, a global object or any ordinary scene object.<itemizedlist>
<listitem><para>For tiled object, it is added to the smallest CTerrainTile in the quad-tree</para></listitem><listitem><para>For global tiled object, it is added to the root CTerrainTile</para></listitem><listitem><para>For non-tiled object, it is added to an automatically created CContainerObject whose name is the class identifier name of the object. hence objects are automatically grouped by class type on the root scene&apos;s child nodes. To explicitly add an object to a specified parent, use AddChild() method on the parent node. <simplesect kind="return"><para>: parent object is returned if successfully attached. For tiled object, this is the smallest terrain tile that contains the object. For non-tiled object, this is the automatically created CContainerObject that. </para></simplesect>
<simplesect kind="note"><para>: If the object has already been attached to the scene, it will be removed and reattached. In most cases, a strong reference of the object is kept by its parent. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1478" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1696" bodyend="1729"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a89d06d0f190151c8a35f6402ab3cf1c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Delete</definition>
        <argsstring>(ParaObject &amp;pObj)</argsstring>
        <name>Delete</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete the object. If the object is root scene object, then the entire scene is deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1482" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1737" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a7fe8ecdb5be82fd88803b7c1c045a96b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Detach</definition>
        <argsstring>(ParaObject &amp;pObj)</argsstring>
        <name>Detach</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> &amp;</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>detach the object. Be sure that the object is properly deleted after it is detached from the scene, because the scene graph is not responsible to manage it any more. The only exception is the managed loader object. <simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_scene_1ab0a9febc49910f984215a68a9ff96da4" kindref="member">CreateManagedLoader(const char * sLoaderName)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1488" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1730" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aad4755bfa8c4635783c7068e9ba2fe8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::FireMissile</definition>
        <argsstring>(int nMissileID, float fSpeed, double fromX, double fromY, double fromZ, double toX, double toY, double toZ)</argsstring>
        <name>FireMissile</name>
        <param>
          <type>int</type>
          <declname>nMissileID</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fSpeed</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fire a missile from (fromX, fromY, fromZ) to (toX, toY, toZ) using the specified missile object and speed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1491" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1768" bodyend="1772"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a25e842004c1ec5d5acb7fdfab46fd63c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::FireMissile1</definition>
        <argsstring>(const char *assetname, float fSpeed, double fromX, double fromY, double fromZ, double toX, double toY, double toZ)</argsstring>
        <name>FireMissile1</name>
        <param>
          <type>const char *</type>
          <declname>assetname</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fSpeed</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1492" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1774" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a4a83d8b5062f68ec126a03d220583ce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::FireMissile2</definition>
        <argsstring>(ParaAssetObject &amp;asset, float fSpeed, double fromX, double fromY, double fromZ, double toX, double toY, double toZ)</argsstring>
        <name>FireMissile2</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fSpeed</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fromZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1493" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1780" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a648b812dfad6a9b48efb9a1908f7a027" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetModified</definition>
        <argsstring>(bool bModified)</argsstring>
        <name>SetModified</name>
        <param>
          <type>bool</type>
          <declname>bModified</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set whether scene is modified </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1496" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2385" bodyend="2388"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a8810ef3c569758398c3cf549fcdcf3ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsModified</definition>
        <argsstring>()</argsstring>
        <name>IsModified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get whether scene is modified </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1498" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2390" bodyend="2393"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a456b6dff8ecc09fcdfb4a294aef5e944" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsScenePaused</definition>
        <argsstring>()</argsstring>
        <name>IsScenePaused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when a scene is paused, all animation will be frozen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1501" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2532" bodyend="2535"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a89c583df9245763b40fd53b91f68c4a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::PauseScene</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>PauseScene</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pause the scene </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1503" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2537" bodyend="2540"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ae5b780337c7d6947a8c2687296d97889" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsSceneEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsSceneEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether 3D scene is enabled or not. a disabled scene is not visible no matter what. This function must be called at least once whenever a new scene is loaded, or 3D scene will not be displayed. A scene is automatically disabled when cleaned up. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1508" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2542" bodyend="2545"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a1dbe2acb93a67ce8dfdcf2877aa9541f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::EnableScene</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnableScene</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enable the scene </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1510" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2547" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a84226806195e65e114698bb72bbbe138" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateMeshObject</definition>
        <argsstring>(const char *strObjectName, const char *strMeshAssetName, float fOBB_X, float fOBB_Y, float fOBB_Z, float fFacing, bool bSolid, const char *localMatrix)</argsstring>
        <name>CreateMeshObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strMeshAssetName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSolid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a simple and static mesh object in the scene. Solid mesh will collide with mobile characters. Simple mesh does not implement clipping optimization, hence should not be very large. It is good to use it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strMeshAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para>for small houses, trees, stones, small hills, etc. when naming mesh file, one can combine &quot;_a&quot;(no physics), &quot;_b&quot;(billboard), &quot;_t&quot;(transparent), &quot;_d&quot;(dim or no lighting), &quot;_r&quot;(receive shadow) in the file name in any order, such as &quot;xxx_b_t_d.x&quot;. all such special file endings are listed below<itemizedlist>
<listitem><para>&quot;_a&quot;: no physics, it will have no physics, even bApplyPhysics is true. For example. &quot;grass_a.x&quot;.</para></listitem><listitem><para>&quot;_b&quot;: billboarded and no physics</para></listitem><listitem><para>&quot;_r&quot;: mesh is shadow receiver</para></listitem><listitem><para>&quot;_e&quot;: mesh is not a shadow caster</para></listitem><listitem><para>&quot;_t&quot;: mesh contains majority transparent objects. Please note that this is different from alpha testing. Transparency throguh alpha testing is not transparent.</para></listitem><listitem><para>&quot;_p&quot;: mesh is picture or particles. They are rendered with billboarding and Force No Light flag on.</para></listitem><listitem><para>&quot;_d&quot;: mesh is dim and is rendered with force no light on.</para></listitem><listitem><para>&quot;_v&quot;: mesh is rendered with vegetation shader. the static model like palm trees, grasses, bamboos can be animated by this shader. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fOBB_X</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fOBB_Y</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fOBB_Z</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.z </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fFacing</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation of the bounding box around the y axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bSolid</parametername>
</parameternamelist>
<parameterdescription>
<para>1, if it is a solid mesh, otherwise it is passable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the local transformation matrix of the mesh. It is a string of 4*3 number of float values separated by comma (see below): <linebreak/>
 &quot;mat._11, mat._12, mat._13, mat._21, mat._22, mat._23,mat._31, mat._32, mat._33,mat._41, mat._42, mat._43&quot; If a blank string(&quot;&quot;) is specified, the local matrix is set to identity matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1536" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1875" bodyend="1883"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aee7489a254ed490ab7ad032eeea2864a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateMeshObject</definition>
        <argsstring>(const char *strObjectName, ParaAssetObject &amp;asset, float fOBB_X, float fOBB_Y, float fOBB_Z, float fFacing, bool bSolid, const char *localMatrix)</argsstring>
        <name>CreateMeshObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSolid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1538" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1885" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a0e8341a4aa64a64838b607b7e7a0f119" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaScene::CreateObject</definition>
        <argsstring>(const char *strType, const char *strObjectName, double x, double y, double z)</argsstring>
        <name>CreateObject</name>
        <param>
          <type>const char *</type>
          <declname>strType</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create an object according to type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strType</parametername>
</parameternamelist>
<parameterdescription>
<para>as returned by GetAttributeClassName of IAttributeField, such as &quot;CMeshPhysicsObject&quot;, &quot;CMeshObject&quot;, &quot;CBipedObject&quot;, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para>string identifier of the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1547" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2673" bodyend="2688"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a39f9a4b8e0b14a8c3754e162761517fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaScene::CreateZone</definition>
        <argsstring>(const char *sZoneName, const char *sBoundingVolumes, float width, float height, float depth, float facing)</argsstring>
        <name>CreateZone</name>
        <param>
          <type>const char *</type>
          <declname>sZoneName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sBoundingVolumes</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>facing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a portal zone object for portal rendering. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sZoneName</parametername>
</parameternamelist>
<parameterdescription>
<para>it must be unique. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>the zone sphere radius is an approximation of the bounding volume. we will only further check if an object is inside a zone, if it is first inside this sphere. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sBoundingVolumes</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is &quot;&quot;, the zone will not be able to automatically determine which mobile objects are in it. or it can be &quot;x1,y1,z1;x2,y2,z2;x3,y3,z3;&quot; each three value is a point in local space denoting a plane of the bounding volume. because the convex bounding volume in local space always contains the origin, three values is enough to represent a plane in the bounding volume. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
<parametername>height</parametername>
<parametername>depth</parametername>
<parametername>facing</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounding shape of the portal. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1558" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1840" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a2d1247be914de7856a0101ec8110bd9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaScene::CreatePortal</definition>
        <argsstring>(const char *sPortalName, const char *sHomeZone, const char *sTargetZone, const char *sQuadVertices, float width, float height, float depth, float facing)</argsstring>
        <name>CreatePortal</name>
        <param>
          <type>const char *</type>
          <declname>sPortalName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sHomeZone</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sTargetZone</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sQuadVertices</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>facing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a portal object for portal rendering <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sPortalName</parametername>
</parameternamelist>
<parameterdescription>
<para>it must be a unique name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sHomeZone</parametername>
</parameternamelist>
<parameterdescription>
<para>a zone name that this portal connects. this can be &quot;&quot;, if a portal is not connected to any zone. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sTargetZone</parametername>
</parameternamelist>
<parameterdescription>
<para>another zone name that this portal connects. this can be &quot;&quot;, if the portal is connected to outer space. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sQuadVertices</parametername>
</parameternamelist>
<parameterdescription>
<para>it is coordinates of the 4 quad vertices, &quot;x1,y1,z1;x2,y2,z2;x3,y3,z3;x4,y4,z4;&quot; the order of the first three vertices decides the direction of the quad plane. direction of quad plane is only useful when the portal&apos;s sTargetZone is empty(outer space), and it should always point from home zone to outer space. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
<parametername>height</parametername>
<parametername>depth</parametername>
<parametername>facing</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounding size of the portal. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1569" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1856" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ab63a23a895cc0d97692758324023cecc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaScripting::ParaObject ParaScripting::ParaScene::CreateVoxelMesh</definition>
        <argsstring>(const char *strObjectName, const char *sGridFileName, const char *sTextureFileName)</argsstring>
        <name>CreateVoxelMesh</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sGridFileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sTextureFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a voxel mesh object. A voxel mesh is a 32*32*32 grid which can be editable at runtime, and rendered using the matching cube algorithm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sGridFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the file name from which to load.This can be &quot;&quot;, where an empty one is created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sTextureFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the texture to use, one can later change this by calling SetReplaceableTexture. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1577" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1823" bodyend="1838"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a6839d5cd4807a1ca4401822e0c69f74b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::CreateSkyBox</definition>
        <argsstring>(const char *strObjectName, const char *strMeshAssetName, float fScaleX, float fScaleY, float fScaleZ, float fHeightOffset)</argsstring>
        <name>CreateSkyBox</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strMeshAssetName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleZ</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fHeightOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a sky box and add it to the current list. sky box with the same name will not be recreated,but will be selected as the current sky box. It may be a sky box/dome/plane or whatever. The associated mesh will be scaled by the specified amount along x,y,z axis and then translate up or down along the y axis. in many cases, the mesh data in the mesh asset is of unit size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para>sky name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strMeshAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh asset name. this is not the file name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fScaleX</parametername>
</parameternamelist>
<parameterdescription>
<para>the static mesh local transform scale along the x axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fScaleY</parametername>
</parameternamelist>
<parameterdescription>
<para>the static mesh local transform scale along the y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fScaleZ</parametername>
</parameternamelist>
<parameterdescription>
<para>the static mesh local transform scale along the z axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fHeightOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the translation along the y axis. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1591" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1804" bodyend="1809"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a12fac683896c9a16a331a39540deed01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::CreateSkyBox_</definition>
        <argsstring>(const char *strObjectName, ParaAssetObject &amp;asset, float fScaleX, float fScaleY, float fScaleZ, float fHeightOffset)</argsstring>
        <name>CreateSkyBox_</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaleZ</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fHeightOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1592" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1810" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a15e65b1f07ce1ba908225d9732cd2f08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::DeleteSkyBox</definition>
        <argsstring>(const char *strObjectName)</argsstring>
        <name>DeleteSkyBox</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete a name sky box. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is &quot;&quot;, all sky boxes will be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1595" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1817" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a27316c06cf8ba1450aaf441050baca1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateMeshPhysicsObject</definition>
        <argsstring>(const char *strObjectName, const char *strMeshAssetName, float fOBB_X, float fOBB_Y, float fOBB_Z, bool bApplyPhysics, const char *localMatrix)</argsstring>
        <name>CreateMeshPhysicsObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strMeshAssetName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bApplyPhysics</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create static triangle mesh based actor for novodex physics engine. Some notes about meshes:<itemizedlist>
<listitem><para>Be sure that you define face normals as facing in the direction you intend. Collision detection will only work correctly between shapes approaching the mesh from the outside, i.e. from the direction in which the face normals point.</para></listitem><listitem><para>Do not duplicate identical vertices! If you have two triangles sharing a vertex, this vertex should only occur once in the vertex list, and both triangles should index it in the index list. If you create two copies of the vertex, the collision detection code wont know that it is actually the same vertex, which leads to a decreased performance and unreliable results.</para></listitem><listitem><para>Also avoid t-joints and non-manifold edges for the same reason. (A t-joint is a vertex of one triangle that is placed right on top of an edge of another triangle, but this second triangle is not split into two triangles at the vertex, as it should. A non-manifold edge is an edge (a pair of vertices) that is referenced by more than two triangles.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strMeshAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh asset name which contains the triangular mesh. when naming mesh file, one can combine &quot;_a&quot;(no physics), &quot;_b&quot;(billboard), &quot;_t&quot;(transparent), &quot;_d&quot;(dim or no lighting), &quot;_r&quot;(receive shadow) in the file name in any order, such as &quot;xxx_b_t_d.x&quot;. all such special file endings are listed below</para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para><para>&quot;_a&quot;: no physics, it will have no physics, even bApplyPhysics is true. For example. &quot;grass_a.x&quot;.<itemizedlist>
<listitem><para>&quot;_b&quot;: billboarded and no physics</para></listitem><listitem><para>&quot;_r&quot;: mesh is shadow receiver</para></listitem><listitem><para>&quot;_e&quot;: mesh is not a shadow caster</para></listitem><listitem><para>&quot;_t&quot;: mesh contains majorily transparent objects. Please note that this is diferent from alpha testing. Transparency throguh alpha testing is not transparent.</para></listitem><listitem><para>&quot;_p&quot;: mesh is picture or particles. They are rendered with billboarding and Force No Light flag on.</para></listitem><listitem><para>&quot;_d&quot;: mesh is dim and is rendered with force no light on.</para></listitem><listitem><para>&quot;_v&quot;: mesh is rendered with vegetation shader. the static model like palm trees, grasses, bamboos can be animated by this shader. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fOBB_X</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fOBB_Y</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fOBB_Z</parametername>
</parameternamelist>
<parameterdescription>
<para>object bounding box.z </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bApplyPhysics</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to turn on the physics of the mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the local transformation matrix of the mesh. It is a string of 4*3 number of float values separated by comma (see below): <linebreak/>
 &quot;mat._11, mat._12, mat._13, mat._21, mat._22, mat._23,mat._31, mat._32, mat._33,mat._41, mat._42, mat._43&quot; If a blank string(&quot;&quot;) is specified, the local matrix is set to identity matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1633" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2038" bodyend="2046"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ab42e08643f9ce8f4866da2461be65de0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateMeshPhysicsObject</definition>
        <argsstring>(const char *strObjectName, ParaAssetObject &amp;asset, float fOBB_X, float fOBB_Y, float fOBB_Z, bool bApplyPhysics, const char *localMatrix)</argsstring>
        <name>CreateMeshPhysicsObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bApplyPhysics</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1634" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1971" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a0950cc30a2c47bcef096be319b560209" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::CreateMeshPhysicsObject__</definition>
        <argsstring>(ParaObject *pOut, const char *strObjectName, ParaAssetObject &amp;asset, float fOBB_X, float fOBB_Y, float fOBB_Z, bool bApplyPhysics, const char *localMatrix)</argsstring>
        <name>CreateMeshPhysicsObject__</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bApplyPhysics</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. this is solely for exporting API. and should not be used from the scripting interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1636" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1966" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ac6ce11e20d60462bfe5c71b1b777a630" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateLightObject</definition>
        <argsstring>(const char *strObjectName, float fPosX, float fPosY, float fPosZ, const char *sLightParams, const char *localMatrix)</argsstring>
        <name>CreateLightObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPosX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPosY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPosZ</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sLightParams</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>localMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new light object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para>Light Object&apos;s name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fPosX</parametername>
</parameternamelist>
<parameterdescription>
<para>world position X </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fPosY</parametername>
</parameternamelist>
<parameterdescription>
<para>world position Y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fPosZ</parametername>
</parameternamelist>
<parameterdescription>
<para>world position Z </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sLightParams</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is &quot;&quot; a default light will be created. otherwise it is in the following format. format is &quot;Type Range (r g b a) att0 att1 att2&quot; D3DLIGHTTYPE Type; Type of light source<itemizedlist>
<listitem><para>D3DLIGHT_POINT = 1,</para></listitem><listitem><para>D3DLIGHT_SPOT = 2,</para></listitem><listitem><para>D3DLIGHT_DIRECTIONAL = 3, float Range; Cutoff range D3DCOLORVALUE Diffuse; Diffuse color of light float Attenuation0; Constant attenuation float Attenuation1; Linear attenuation float Attenuation2; Quadratic attenuation e.g. &quot;1 7.0 (1 1 0 1) 0.3 0.1 1&quot; light intensity is calculated as 1/(Attenuation0+d*Attenuation1+d*d*Attenuation2), where d is the distance from the light to object center.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
This is used to make light objects persistent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>localMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the local transformation matrix of the mesh. It is a string of 4*3 number of float values separated by comma (see below): <linebreak/>
 &quot;mat._11, mat._12, mat._13, mat._21, mat._22, mat._23,mat._31, mat._32, mat._33,mat._41, mat._42, mat._43&quot; If a blank string(&quot;&quot;) is specified, the local matrix is set to identity matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>light object is created and returned. One need to attach it to scene. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1666" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1931" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a064b5e08ef95cdc3a4a04876e8fca1f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateDynamicPhysicsObject</definition>
        <argsstring>(const char *strObjectName, const char *strMeshAssetName, float fOBB_X, float fOBB_Y, float fOBB_Z, bool bRenderMesh)</argsstring>
        <name>CreateDynamicPhysicsObject</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strMeshAssetName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_X</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fOBB_Z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bRenderMesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create dynamic physics actor for novodex physics engine. dynamic objects are considered global object and is loaded to the physics engine immediately currently, only Box and sphere shaped objects are supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1673" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2048" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a71cd753ab52761a7999eac736e263564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateCharacter</definition>
        <argsstring>(const char *strObjectName, const char *strMultiAnimationAssetName, const char *strScript, bool bIsGlobal, float fRadius, float fFacing, float fScaling)</argsstring>
        <name>CreateCharacter</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strMultiAnimationAssetName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strScript</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGlobal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create Character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strObjectName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name short cut for this object. If the character with the same name exists, it will be renamed to a random name. So that the character is always created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strMultiAnimationAssetName</parametername>
</parameternamelist>
<parameterdescription>
<para>the asset name of the base model. It can be nil, in which one must specified it in other means. if the asset file name ends with &quot;_s&quot;, it will always be static and local , even IsGlobal is true. For example. &quot;windmill_s.x&quot;. Some other special file endings are listed below<itemizedlist>
<listitem><para>&quot;_s&quot;: force static, solid and local. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strScript</parametername>
</parameternamelist>
<parameterdescription>
<para>The script file to be loaded when the object is loaded for the first time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bIsGlobal</parametername>
</parameternamelist>
<parameterdescription>
<para>a global character is not attached to the quad tree terrain, thus can move around the entire scene a non-global character is attached to the quad tree terrain, and is generally considered immobile. although it is OK for non-global character to move only in very small region. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>radius of the character used in collision detection. if radius is 0, then the object is regarded as passable (not solid). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fFacing</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation around the y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fScaling</parametername>
</parameternamelist>
<parameterdescription>
<para>typically this should be 1, however, one can scale the mesh and animation to render the character in a different size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>get the model asset. </para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1691" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2164" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aaaaedf2eb5146902bab372d6b2ebc37b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::CreateCharacter</definition>
        <argsstring>(const char *strObjectName, ParaAssetObject &amp;asset, const char *strScript, bool bIsGlobal, float fRadius, float fFacing, float fScaling)</argsstring>
        <name>CreateCharacter</name>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strScript</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGlobal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>set attribute</para><para>set perceptive radius for the character </para>        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1693" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2075" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a3793c4feeeedcdcffa3468c9128c9a2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::CreateCharacter__</definition>
        <argsstring>(ParaObject *pOut, const char *strObjectName, ParaAssetObject &amp;asset, const char *strScript, bool bIsGlobal, float fRadius, float fFacing, float fScaling)</argsstring>
        <name>CreateCharacter__</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strObjectName</declname>
        </param>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> &amp;</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strScript</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bIsGlobal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFacing</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fScaling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. this is solely for exporting API. and should not be used from the scripting interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1696" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2069" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad95921ab2655cd08126271ff86043852" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Play3DSound</definition>
        <argsstring>(const char *strSoundAssetName, float fX, float fY, float fZ)</argsstring>
        <name>Play3DSound</name>
        <param>
          <type>const char *</type>
          <declname>strSoundAssetName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>play a 3D sound at world location (fx, fy, fz). Currently, the sound is played until it stopped(no looping). And the sound range is internally defined. Please use the <ref refid="class_para_scripting_1_1_para_u_i_1ad9de1dcba788a1aa4e8fe92348e1ec93" kindref="member">ParaUI.PlaySound()</ref> to play an ordinary sound or music with or without looping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1704" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2247" bodyend="2249"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1acab3ab6a4b47ffcb068e7c180a6633ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetGlobalWater</definition>
        <argsstring>(bool bEnable, float fWaterLevel)</argsstring>
        <name>SetGlobalWater</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fWaterLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the global water drawing attribute. the global water level is just a water surface at a given height, which is always drawn at current camera location to fill the entire screen. Water surface will be drawn after terrain <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bEnable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to draw global water </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fWaterLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>water level in meters. Default value is 0.0f; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1714" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2211" bodyend="2215"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1af341cec96ec32cb01fd0fb74bc6a1f02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaScene::GetGlobalWaterLevel</definition>
        <argsstring>()</argsstring>
        <name>GetGlobalWaterLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the current global water level in meters. This function will return valid value even if the water is disabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1717" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2217" bodyend="2222"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aa29b70db1e83c1f34cf97452526bd45e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsGlobalWaterEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsGlobalWaterEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return true if global ocean water is enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1720" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2224" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1abbd9654a51a90b40e9002220f44e2ac7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::UpdateOcean</definition>
        <argsstring>()</argsstring>
        <name>UpdateOcean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>call this function, when the ocean has changed or the environment has changed. This will cause the reflection map of the ocean surface to redraw regardless of whether the camera moves or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1724" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2448" bodyend="2451"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad8d8221a4c43a1d1b7967c2487ff89e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::AddWaterRipple</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>AddWaterRipple</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add water ripple to the ocean surface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the ripple </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>this is usually set to the current water level. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_para_scripting_1_1_para_scene_1af341cec96ec32cb01fd0fb74bc6a1f02" kindref="member">GetGlobalWaterLevel()</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the ripple </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1732" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2231" bodyend="2235"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a1c038f189f987549b79a00e4abe6ee42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::Execute</definition>
        <argsstring>(const char *strCmd)</argsstring>
        <name>Execute</name>
        <param>
          <type>const char *</type>
          <declname>strCmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>execute the scene command string. Most commands are for debugging purposes. The list of command is given below:<itemizedlist>
<listitem><para>&quot;show OBB&quot; display every scene object&apos;s bounding box</para></listitem><listitem><para>&quot;hide OBB&quot; hide every scene object&apos;s bounding box</para></listitem><listitem><para>&quot;show report&quot; display the per frame report, such as number of mesh drawn, number of terrain triangles, etc,..</para></listitem><listitem><para>&quot;hide report&quot; hide the per frame report, such as number of mesh drawn, number of terrain triangles, etc,..  strCmd: the string command passed </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1743" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1530" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1af252dbefa4375fc1ae22d218128d8d84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::MousePick</definition>
        <argsstring>(float fMaxDistance, const char *sFilterFunc)</argsstring>
        <name>MousePick</name>
        <param>
          <type>float</type>
          <declname>fMaxDistance</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sFilterFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pick scene object at the current mouse cursor position. pick the smallest intersected object which is un-occluded by any objects. Object A is considered occluded by object B only if (1) both A and B intersect with the hit ray. (2) both A and B do not intersect with each other. (3) B is in front of A, with regard to the ray origin.</para><para>this function will ray-pick any loaded scene object(biped &amp; mesh, but excluding the terrain) using their oriented bounding box. a filter function may be provided to further filter selected object. this function will transform all objects to near-camera coordinate system. This will remove some floating point inaccuracy near the camera position.Hence this function is most suitable for testing object near the camera eye position. This function does not rely on the physics engine to perform ray-picking.  fMaxDistance: the longest distance from the ray origin to check for collision. If the value is 0 or negative, the view culling radius is used as the fMaxDistance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFnctFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be any of the following string or a number string &quot;mesh&quot;: mesh any mesh object in the scene. Usually for selection during scene editing. &quot;cmesh&quot;: mesh object that is clickable (associated with scripts). Usually for game playing. &quot;notplayer&quot;: any object in the scene except for the current player. Usually for selection during scene editing. &quot;&quot;: any object in the scene except. Usually for selection during scene editing. &quot;light&quot;: only pick light objects &quot;biped&quot;: any character objects :local or global. &quot;anyobject&quot;: any objects, including mesh and characters. but not including helper objects, such as light. &quot;global&quot;: all global objects, such as global character and mesh. This is usually for game mode. &quot;point&quot;: the returned object is invalid if there no collision with any physics faces. otherwise, one can use GetPosition function of the returned object to retrieve the intersection point. &quot;actionmesh&quot;: mesh with action script. number: if it is a number, it is treated as a 32 bitwise DWORD filter code. see SetPickingFilter() for more example. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>:the scene object. if the object is invalid, it means that the ray has hit nothing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1772" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2271" bodyend="2307"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a4476397568ae4840c9bafda2f3a21e71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::SelectObject</definition>
        <argsstring>(int nGroupIndex, float x, float y, float z, float radius, const char *sFilterFunc)</argsstring>
        <name>SelectObject</name>
        <param>
          <type>int</type>
          <declname>nGroupIndex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sFilterFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>select select objects within a given region into a given group. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nGroupIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>which group to select to. One can get the result from <ref refid="class_para_scripting_1_1_para_selection" kindref="compound">ParaSelection</ref>. In most cases, select to group 1; since group 0 is reserved for current selection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
<parametername>z</parametername>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>a sphere in world space. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sFnctFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be any of the following string. &quot;mesh&quot;: mesh any mesh object in the scene. Usually for selection during scene editing. &quot;cmesh&quot;: mesh object that is clickable (associated with scripts). Usually for game playing. &quot;notplayer&quot;: any object in the scene except for the current player. Usually for selection during scene editing. &quot;&quot;: any object in the scene except. Usually for selection during scene editing. &quot;light&quot;: only pick light objects &quot;biped&quot;: any character objects :local or global. &quot;anyobject&quot;: any objects, including mesh and characters. but not including helper objects, such as light. &quot;global&quot;: all global objects, such as global character and mesh. This is usually for game mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: the total number of selected objects is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1789" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2252" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a8393b329492a0127f651f1e06c7f649a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::SelectObject1</definition>
        <argsstring>(int nGroupIndex, float x1, float y1, float z1, float x2, float y2, float z2, float fRotY, const char *sFilterFunc)</argsstring>
        <name>SelectObject1</name>
        <param>
          <type>int</type>
          <declname>nGroupIndex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRotY</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sFilterFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
<parametername>z1</parametername>
<parametername>x2</parametername>
<parametername>y2</parametername>
<parametername>z2</parametername>
<parametername>fRotY</parametername>
</parameternamelist>
<parameterdescription>
<para>a bounding box: two diagonal points in world space and rotation around Y. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1793" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2258" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ac489d684374e7cc264b926ea83bf7efc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::RegisterEvent</definition>
        <argsstring>(const char *sID, const char *sScript)</argsstring>
        <name>RegisterEvent</name>
        <param>
          <type>const char *</type>
          <declname>sID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sScript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>register a mouse or key event handler <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sID</parametername>
</parameternamelist>
<parameterdescription>
<para>a string identifier of the event handler. if sID begins with &quot;_m&quot; it is treated as a mouse click event, except that if sID begins with &quot;_mm&quot; it is treated as a mouse move event. if sID begins with &quot;_md&quot; it is treated as a mouse down event. if sID begins with &quot;_mu&quot; it is treated as a mouse up event. if sID begins with &quot;_k&quot; it is treated as a key down event. if sID begins with &quot;_ku&quot; it is treated as a key up event. if sID begins with &quot;_n&quot; it is treated as a network event handler. Note: mouse click is rarely used, since it can be produced in NPL via mouse down move and up. However, lazy NPL programmer can still use it if they do not like to write other mouse handlers in NPL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sScript</parametername>
</parameternamelist>
<parameterdescription>
<para>the script to be executed when the event is triggered.This is usually a function call in NPL. sScript should be in the following format &quot;{NPL filename};{sCode};&quot;. this is the same format in the UI event handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1809" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2314" bodyend="2317"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad3c4766ed4f580910089636977372014" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::RegisterEvent1</definition>
        <argsstring>(DWORD nEventType, const char *sID, const char *sScript)</argsstring>
        <name>RegisterEvent1</name>
        <param>
          <type>DWORD</type>
          <declname>nEventType</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sScript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as above <ref refid="class_para_scripting_1_1_para_scene_1ac489d684374e7cc264b926ea83bf7efc" kindref="member">RegisterEvent()</ref>, except that it allows caller to explicitly specify the event type, instead of deriving it from the event name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nEventType</parametername>
</parameternamelist>
<parameterdescription>
<para>any bit combination of EventHandler_type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sID</parametername>
</parameternamelist>
<parameterdescription>
<para>any unique string identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sScript</parametername>
</parameternamelist>
<parameterdescription>
<para>the NPL script. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1816" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2309" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a5241ecd5ffcc68f3fb4e6bd93922101b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::UnregisterEvent</definition>
        <argsstring>(const char *sID)</argsstring>
        <name>UnregisterEvent</name>
        <param>
          <type>const char *</type>
          <declname>sID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unregister a mouse or key event handler </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1818" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2319" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a09564da8ebac31e2100798cf08434af2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::UnregisterAllEvent</definition>
        <argsstring>()</argsstring>
        <name>UnregisterAllEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unregister all mouse or key event handler </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1820" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2324" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a24888e4d6dcd803a31b7f27249a12c77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::EnableMouseClick</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnableMouseClick</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the game engine will automatically generate mouse events for Game Objects.If true, The OnClick callback will be automatically called whenever there is a mouse click. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1824" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2330" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ac516e539e8493518e74dc44fd51f101c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetCurrentActor</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentActor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the actor that is being processed by the AI module or a script call back. The validity of the pointer is not guaranteed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1827" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2376" bodyend="2379"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a75637a7c72500ca43bc12e8540958857" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetCurrentActor</definition>
        <argsstring>(ParaObject pActor)</argsstring>
        <name>SetCurrentActor</name>
        <param>
          <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
          <declname>pActor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the actor that is being processed by the AI module or a script call back. The pointer can be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1829" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2381" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a09b5ba4b88bf19e7ba41943c234a025e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::TogglePlayer</definition>
        <argsstring>()</argsstring>
        <name>TogglePlayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It changes the current player to the next player in the scene. this function is mostly for testing and game purpose. if the object has a reference object, the reference object will become the current object. return : the new current player is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1837" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="1525" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aac70e25953f2e7c241c6d187bf71a602" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref></type>
        <definition>ParaObject ParaScripting::ParaScene::GetObjectByViewBox</definition>
        <argsstring>(const object &amp;viewbox)</argsstring>
        <name>GetObjectByViewBox</name>
        <param>
          <type>const object &amp;</type>
          <declname>viewbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get an object(usually a static mesh object) by a given view box. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>viewbox</parametername>
</parameternamelist>
<parameterdescription>
<para>One can get the view box by calling <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref>:GetViewBox(). Or one can construct it using a table with the following field:{pos_x, pos_y,pos_z,obb_x,obb_y,obb_z,} pos_x, pos_y,pos_z: is the point at the bottom center of the box. obb_x,obb_y,obb_z: is the size of the box. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the object with the closest match with the bounding box. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1848" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2453" bodyend="2479"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1afffa243256a6b611a84dd235798fdb99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::GetActionMeshesBySphere</definition>
        <argsstring>(const object &amp;inout, float x, float y, float z, float radius)</argsstring>
        <name>GetActionMeshesBySphere</name>
        <param>
          <type>const object &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the action meshes within or intersect a sphere. same as GetObjectsBySphere(..., &quot;actionmesh&quot;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1854" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2481" bodyend="2484"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a9d5b4b5bb5318f0ffdc7d689706b3233" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::GetObjectsBySphere</definition>
        <argsstring>(const object &amp;inout, float x, float y, float z, float radius, const char *sFilterFunc)</argsstring>
        <name>GetObjectsBySphere</name>
        <param>
          <type>const object &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sFilterFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inout</parametername>
</parameternamelist>
<parameterdescription>
<para>input and output, it should be an empty table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>sphere center x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>sphere center y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>sphere center z </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>sphere radius </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sFnctFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be any of the following string. &quot;mesh&quot;: mesh any mesh object in the scene. Usually for selection during scene editing. &quot;cmesh&quot;: mesh object that is clickable (associated with scripts). Usually for game playing. &quot;notplayer&quot;: any object in the scene except for the current player. Usually for selection during scene editing. &quot;&quot;: any object in the scene except. Usually for selection during scene editing. &quot;light&quot;: only pick light objects &quot;biped&quot;: any character objects :local or global. &quot;anyobject&quot;: any objects, including mesh and characters. but not including helper objects, such as light. &quot;actionmesh&quot;: mesh with action script. &quot;global&quot;: all global objects, such as global character and mesh. This is usually for game mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1873" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2507" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ae245bd8fff57227fb666ce8beebf631f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::GetObjectsByScreenRect</definition>
        <argsstring>(const object &amp;inout, int left, int top, int right, int bottom, const char *sFilterFunc, float fMaxDistance)</argsstring>
        <name>GetObjectsByScreenRect</name>
        <param>
          <type>const object &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sFilterFunc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fMaxDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get objects inside or intersect with a screen rect. screen rect is translated to a 3d cone from the camera eye position to a plane fMaxDistance away. This function is usually used for finding other static mesh objects near a certain character. please note that: objects must be completely inside the near and far planes in order to pass the test. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>list to get the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
<parametername>top</parametername>
<parametername>right</parametername>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>the rect in screen space coordinates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sFnctFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be any of the following string. &quot;mesh&quot;: mesh any mesh object in the scene. Usually for selection during scene editing. &quot;cmesh&quot;: mesh object that is clickable (associated with scripts). Usually for game playing. &quot;notplayer&quot;: any object in the scene except for the current player. Usually for selection during scene editing. &quot;&quot;: any object in the scene except. Usually for selection during scene editing. &quot;light&quot;: only pick light objects &quot;biped&quot;: any character objects :local or global. &quot;anyobject&quot;: any objects, including mesh and characters. but not including helper objects, such as light. &quot;actionmesh&quot;: mesh with action script. &quot;global&quot;: all global objects, such as global character and mesh. This is usually for game mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fMaxDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>the world unit distance inside which we will test possible candidates. if negative, it will get all visible ones. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return the number of objects in sphere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1894" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2486" bodyend="2505"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1af7224b67adeaff54052e0988d23d26d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::OnTerrainChanged</definition>
        <argsstring>(float x, float y, float fRadius)</argsstring>
        <name>OnTerrainChanged</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRadius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called manually to update characters in a square region. So that when the terrain heightfield is changed, the characters within the region will act accordingly, either falling down or snap to terrain surface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>center of the terrain region being modified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>center of the terrain region being modified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>: radius of the terrain region being modified. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1903" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2527" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a41ed3e640e01e86b55b9f06a6b5f1eeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::SaveAllCharacters</definition>
        <argsstring>()</argsstring>
        <name>SaveAllCharacters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save all local characters in the scene to the current NPC database regardless of whether they are modified or not this function is usually called manually in some very rare cases. In most cases, call SaveLocalCharacters() instead. <simplesect kind="return"><para>the number of saved characters are returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1910" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2552" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ae9bbfa96bb54807bb14d1f0c968ec9ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::ShowHeadOnDisplay</definition>
        <argsstring>(bool bShow)</argsstring>
        <name>ShowHeadOnDisplay</name>
        <param>
          <type>bool</type>
          <declname>bShow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>show or hide all scene&apos;s objects&apos; head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1913" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2599" bodyend="2602"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a9bee17d9f4720955e283928bea14d706" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsHeadOnDisplayShown</definition>
        <argsstring>()</argsstring>
        <name>IsHeadOnDisplayShown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether all scene&apos;s objects&apos; head on display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1916" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2604" bodyend="2607"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aa23523ad6c65c90784f7dfa739291f67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::LoadNPCsByRegion</definition>
        <argsstring>(float min_x, float min_y, float min_z, float max_x, float max_y, float max_z, bool bReload)</argsstring>
        <name>LoadNPCsByRegion</name>
        <param>
          <type>float</type>
          <declname>min_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min_z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Preload NPCs By Regions. By default NPCs are loaded on demand when the <ref refid="class_para_scripting_1_1_para_terrain_1aeb9c63d02106f0aa552821a27012d530" kindref="member">ParaTerrain.GetElevation</ref> is called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>: the list will be filled with data in the database that meat the criterion. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vMin</parametername>
</parameternamelist>
<parameterdescription>
<para>min point in world coordinate system, y component is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vMax</parametername>
</parameternamelist>
<parameterdescription>
<para>max point in world coordinate system, y component is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bReload</parametername>
</parameternamelist>
<parameterdescription>
<para>if the character already exists in the scene and it is true, the character will be updated with the parameter in the database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of NPC is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1926" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2650" bodyend="2655"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a34ae981a68d9c512558e401d0e5c4415" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetCharacterRegionPath</definition>
        <argsstring>(int slot, const std::string &amp;path)</argsstring>
        <name>SetCharacterRegionPath</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NOTE by andy: 2011.5.23 set character customization system region path setting allow different projects share the same CCS implementation and separate region paths for asset management <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>region slot id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>new region path NOTE: path string recorded in a static map &lt;slot, path&gt; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1936" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2657" bodyend="2661"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1acade1878d456476ee47f84b94c208a0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetCharTextureSize</definition>
        <argsstring>(int nCharacterTexSize, int nCartoonFaceTexSize)</argsstring>
        <name>SetCharTextureSize</name>
        <param>
          <type>int</type>
          <declname>nCharacterTexSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCartoonFaceTexSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the default character skin and cartoon face texture size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nCharacterTexSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the character texture size. default to 256. 512 is also fine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCartoonFaceTexSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the character texture size. default to 256. 128 is also fine. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>: One must call SetCharRegionCoordinates afterwards to change the region accordingly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1943" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2663" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a2cb26e779ca0a3390020286a1bcf6b2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetCharRegionCoordinates</definition>
        <argsstring>(int nRegionIndex, int xpos, int ypos, int xsize, int ysize)</argsstring>
        <name>SetCharRegionCoordinates</name>
        <param>
          <type>int</type>
          <declname>nRegionIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set char region coordinates. This function together with SetCharTextureSize makes CCS regions fully customizable via scripting interface. however, the region index are predefined and can not be changed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nRegionIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>see enumeration CharRegions. it must be smaller than NUM_REGIONS. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
<parametername>ypos</parametername>
<parametername>xsize</parametername>
<parametername>ysize</parametername>
</parameternamelist>
<parameterdescription>
<para>see struct CharRegionCoords. defines a rect region within the skin or face texture. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1950" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2668" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a761d104c4b8c7154387bf820ac430a29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetTimeOfDay</definition>
        <argsstring>(float time)</argsstring>
        <name>SetTimeOfDay</name>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set time of day in seconds. Use <ref refid="class_para_scripting_1_1_para_scene_1aa3d23bbf1c79044770041e7a6d0094d2" kindref="member">SetDayLength()</ref> to set the total number of minutes in a day. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time in seconds. This can be any non-negative value. (timeday_length) will be used in case time is longer than a day. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1961" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2335" bodyend="2338"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1ad99a0d8c87b822a503a09e625557c05c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetTimeOfDaySTD</definition>
        <argsstring>(float time)</argsstring>
        <name>SetTimeOfDaySTD</name>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set standard time. see <ref refid="class_para_scripting_1_1_para_scene_1a761d104c4b8c7154387bf820ac430a29" kindref="member">SetTimeOfDay()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>always in the range [-1,1], 0 means at noon, -1 is morning. 1 is night. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1964" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2345" bodyend="2348"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a271496ce45746e28745b3e5da1f31b82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaScene::GetTimeOfDay</definition>
        <argsstring>()</argsstring>
        <name>GetTimeOfDay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the current time of day in seconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1967" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2340" bodyend="2343"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a58d7829ebfcd31ae3564777d61fbdaf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaScene::GetTimeOfDaySTD</definition>
        <argsstring>()</argsstring>
        <name>GetTimeOfDaySTD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get standard time. see <ref refid="class_para_scripting_1_1_para_scene_1a271496ce45746e28745b3e5da1f31b82" kindref="member">GetTimeOfDay()</ref> <simplesect kind="return"><para>: always in the range [-1,1], 0 means at noon, -1 is morning. 1 is night. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1971" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2350" bodyend="2353"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a2cbb3dc2a1db7442041203e2e8e5c32a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetMaximumAngle</definition>
        <argsstring>(float fMaxAngle)</argsstring>
        <name>SetMaximumAngle</name>
        <param>
          <type>float</type>
          <declname>fMaxAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the maximum sun angle with the Y (up) axis. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1974" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2356" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a1fff58eaa9841dd0f31eb8f5e041afd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaScene::AdvanceTimeOfDay</definition>
        <argsstring>(float timeDelta)</argsstring>
        <name>AdvanceTimeOfDay</name>
        <param>
          <type>float</type>
          <declname>timeDelta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>advance time is in seconds, this will also change the light direction, sun color and sun ambient color. this function is automatically called by the environment simulator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1979" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2361" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aa3d23bbf1c79044770041e7a6d0094d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetDayLength</definition>
        <argsstring>(float fMinutes)</argsstring>
        <name>SetDayLength</name>
        <param>
          <type>float</type>
          <declname>fMinutes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set how many minutes are there in a day, this is used in time simulation. default value is 300. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1984" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2366" bodyend="2369"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a84563ac147c55a9bb859a48d2532abe9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ParaScripting::ParaScene::GetDayLength</definition>
        <argsstring>()</argsstring>
        <name>GetDayLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return how many minutes are there in a day in minutes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="1987" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2371" bodyend="2374"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1adf5422ad89255d68060d9e466aa57b87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetShadowMethod</definition>
        <argsstring>(int nMethod)</argsstring>
        <name>SetShadowMethod</name>
        <param>
          <type>int</type>
          <declname>nMethod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the current shadow method:both shadow volume and shadow mapping could be set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nMethod</parametername>
</parameternamelist>
<parameterdescription>
<para>0: turn off all shadow rendering: this will greatly improve performance 1: turn on shadow using shadow volume 2: turn on shadow mapping 3: turn on both shadow volume and shadow mapping </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2000" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2237" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a3764ca0ab09dc2704f1a0a3c9e965cc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::GetShadowMethod</definition>
        <argsstring>()</argsstring>
        <name>GetShadowMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2001" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2242" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a36c2e574c91f7a60358bb209353c4b28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::EnableLighting</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnableLighting</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable both global and local lighting. Turn off lighting will greatly improve performance, such as on slower computers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2004" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2201" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1adef5e3f3dad8decafe02ed42e122caeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsLightingEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsLightingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2005" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2206" bodyend="2209"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a9c6ab5c8caf7e570b5039fbf630ed25d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetFog</definition>
        <argsstring>(bool bRenderFog, const char *strFogColor, float fFogStart, float fFogEnd, float fFogDensity)</argsstring>
        <name>SetFog</name>
        <param>
          <type>bool</type>
          <declname>bRenderFog</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strFogColor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFogStart</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFogEnd</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFogDensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the global fog effect <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bRenderFog</parametername>
</parameternamelist>
<parameterdescription>
<para>1 to enable fog. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strFogColor</parametername>
</parameternamelist>
<parameterdescription>
<para>a string of RGB value in the format &quot;%f %f %f&quot;, such as &quot;1.0 1.0 1.0&quot;, value must be in the range [0, 1.0]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fFogDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>between (0,1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fFogStart</parametername>
</parameternamelist>
<parameterdescription>
<para>unit in meters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fFogEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>unit in meters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2015" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2193" bodyend="2199"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a0b814e2605cdc352178bb931d6721a11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_mini_scene_graph" kindref="compound">ParaMiniSceneGraph</ref></type>
        <definition>ParaScripting::ParaMiniSceneGraph ParaScripting::ParaScene::GetMiniSceneGraph</definition>
        <argsstring>(const char *name)</argsstring>
        <name>GetMiniSceneGraph</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the mini scene graph does not exist, it will be created </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2024" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2572" bodyend="2579"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a8d210fb17638bc45b643299e5346b800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::DeleteMiniSceneGraph</definition>
        <argsstring>(const char *name)</argsstring>
        <name>DeleteMiniSceneGraph</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete mini scene graphs by name. if name is &quot;&quot; or &quot;*&quot;, all mini scene graphs will be deleted. <simplesect kind="return"><para>: the number of graphs deleted is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2029" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2581" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a542adac33eebf29f69fe82a08fc1e464" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::EnableMiniSceneGraph</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnableMiniSceneGraph</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enable to render all mini scene graphs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2032" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2589" bodyend="2592"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1adf338c7878236492802f7e7bdce7893c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsMiniSceneGraphEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsMiniSceneGraphEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enable to render all mini scene graphs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2035" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2594" bodyend="2597"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a4df92e71448c52569a5e893cace42135" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_mini_scene_graph" kindref="compound">ParaMiniSceneGraph</ref></type>
        <definition>ParaScripting::ParaMiniSceneGraph ParaScripting::ParaScene::GetPostProcessingScene</definition>
        <argsstring>()</argsstring>
        <name>GetPostProcessingScene</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the post processing mini scene graph. <simplesect kind="return"><para>: this is same as GetMiniSceneGraph(&quot;_ps&quot;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2039" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2557" bodyend="2560"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a131b20cfddc9a6a03c5d9027b9d12a12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::EnablePostProcessing</definition>
        <argsstring>(bool bEnable, const char *sCallbackScript)</argsstring>
        <name>EnablePostProcessing</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sCallbackScript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set whether post processing is enabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bEnable</parametername>
</parameternamelist>
<parameterdescription>
<para>bool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sCallbackScript</parametername>
</parameternamelist>
<parameterdescription>
<para>if bEnabled is true, this is a callback script to be called per frame at which one can process scene after the main 3d scene is rendered. if this is NULL, the old callback script is used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2046" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2562" bodyend="2565"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1aa4bf2c080fa159d86341204c25e54517" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::IsPostProcessingEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsPostProcessingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get whether post processing is enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2049" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2567" bodyend="2570"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a9553b812f16971812f015062b75bb1cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaScene::GetScreenPosFrom3DPoint</definition>
        <argsstring>(float x, float y, float z, const object &amp;output)</argsstring>
        <name>GetScreenPosFrom3DPoint</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const object &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get screen 2D position(x,y) from a 3d world point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>in world coordinate system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output table, containing additional info, such as {x=screen position x,y=screen position y,z= depth in the 0,1 range, visible=bool:is point is visible in camera frustum, distance=float:distance from eye to the object, } </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point is visible in screen. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2058" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2619" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a32fd1d9b204730135c9a35eb80bba305" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaScene::SetMaxRenderCount</definition>
        <argsstring>(int nRenderImportance, int nCount)</argsstring>
        <name>SetMaxRenderCount</name>
        <param>
          <type>int</type>
          <declname>nRenderImportance</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the max number of objects to be rendered of a given render importance. One can set the render importance of any objects by setting its &quot;RenderImportance&quot; property <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nRenderImportance</parametername>
</parameternamelist>
<parameterdescription>
<para>the render importance to set. All objects are by default set with render importance 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCount</parametername>
</parameternamelist>
<parameterdescription>
<para>the max number to set for the above render importance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2065" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2614" bodyend="2617"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_scene_1a9285b575edb2ae782fe8d2850acbd778" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaScene::GetMaxRenderCount</definition>
        <argsstring>(int nRenderImportance)</argsstring>
        <name>GetMaxRenderCount</name>
        <param>
          <type>int</type>
          <declname>nRenderImportance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the max number of objects to be rendered of a given render importance. One can set the render importance of any objects by setting its &quot;RenderImportance&quot; property <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nRenderImportance</parametername>
</parameternamelist>
<parameterdescription>
<para>the render importance to set. All objects are by default set with render importance 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCount</parametername>
</parameternamelist>
<parameterdescription>
<para>the max number to set for the above render importance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptBindings/ParaScriptingScene.h" line="2072" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.cpp" bodystart="2609" bodyend="2612"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_para_scripting_1_1_para_scene" kindref="compound">ParaScene</ref> namespace contains a list of HAPI functions to create and modify scene objects in paraworld. The following are basic steps to create scene object:<itemizedlist>
<listitem><para>Use Create*() functions to create scene object. The created object is return as a <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> instance.</para></listitem><listitem><para>Use the <ref refid="class_para_scripting_1_1_para_object" kindref="compound">ParaObject</ref> instance to modify the position and orientation of the object.</para></listitem><listitem><para>Use Attach method to insert the scene object to the scene.</para></listitem></itemizedlist>
</para><para>Please note: if an object is created without attaching to the scene, it may result in memory leak. although, we may automatically clear unattached scene object, when the application quit. </para>    </detaileddescription>
    <location file="ParaScriptBindings/ParaScriptingScene.h" line="1292" column="1" bodyfile="ParaScriptBindings/ParaScriptingScene.h" bodystart="1291" bodyend="2073"/>
    <listofallmembers>
      <member refid="class_para_scripting_1_1_para_scene_1ad8d8221a4c43a1d1b7967c2487ff89e8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>AddWaterRipple</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a1fff58eaa9841dd0f31eb8f5e041afd8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>AdvanceTimeOfDay</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a6a7a6a4ba8ba38fe4eeec98d59f2c5d2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Attach</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1acace224384716b526b07736f83498e5d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CheckExist</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a71cd753ab52761a7999eac736e263564" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateCharacter</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aaaaedf2eb5146902bab372d6b2ebc37b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateCharacter</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a3793c4feeeedcdcffa3468c9128c9a2f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateCharacter__</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a064b5e08ef95cdc3a4a04876e8fca1f3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateDynamicPhysicsObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a782a4f943aaa7712755ee6f631317929" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateGlobalTerrain</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ac6ce11e20d60462bfe5c71b1b777a630" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateLightObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ab0a9febc49910f984215a68a9ff96da4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateManagedLoader</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a84226806195e65e114698bb72bbbe138" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateMeshObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aee7489a254ed490ab7ad032eeea2864a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateMeshObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a27316c06cf8ba1450aaf441050baca1c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateMeshPhysicsObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ab42e08643f9ce8f4866da2461be65de0" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateMeshPhysicsObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a0950cc30a2c47bcef096be319b560209" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateMeshPhysicsObject__</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a0e8341a4aa64a64838b607b7e7a0f119" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a2d1247be914de7856a0101ec8110bd9f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreatePortal</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a6839d5cd4807a1ca4401822e0c69f74b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateSkyBox</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a12fac683896c9a16a331a39540deed01" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateSkyBox_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ab63a23a895cc0d97692758324023cecc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateVoxelMesh</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a54ad4cf5b139a1ba702e36bd59fd0ba2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateWorld</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a39f9a4b8e0b14a8c3754e162761517fa" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>CreateZone</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a89d06d0f190151c8a35f6402ab3cf1c3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Delete</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a8d210fb17638bc45b643299e5346b800" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>DeleteMiniSceneGraph</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a15e65b1f07ce1ba908225d9732cd2f08" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>DeleteSkyBox</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a7fe8ecdb5be82fd88803b7c1c045a96b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Detach</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a36c2e574c91f7a60358bb209353c4b28" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>EnableLighting</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a542adac33eebf29f69fe82a08fc1e464" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>EnableMiniSceneGraph</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a24888e4d6dcd803a31b7f27249a12c77" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>EnableMouseClick</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a131b20cfddc9a6a03c5d9027b9d12a12" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>EnablePostProcessing</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a1dbe2acb93a67ce8dfdcf2877aa9541f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>EnableScene</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a1c038f189f987549b79a00e4abe6ee42" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Execute</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aad4755bfa8c4635783c7068e9ba2fe8b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>FireMissile</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a25e842004c1ec5d5acb7fdfab46fd63c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>FireMissile1</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a4a83d8b5062f68ec126a03d220583ce1" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>FireMissile2</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1afffa243256a6b611a84dd235798fdb99" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetActionMeshesBySphere</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a04a69b1b68c9c967d7ee14d1e21023d1" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a58c5a1bbd63cf160fbf5bbdcdfe7e2e4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObject1</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1af7c4fa19f7c108ead1095585e6b53ed5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObject_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a5e85601385bd5a3b6eaebbb9645ff97e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectOcean</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a83c6b8bbcd9a9e69c62bba1fbf5b4e78" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectOcean_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a76297d7a1a07fea6750782e02a8acaf6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectPlayer</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a08938aa24ffbd3ecc7e8394d91a21161" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectPlayer_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1af64c1571a338d393516bd97d03d0f921" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectSky</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ad8231159da2c7be9b959049726d70d57" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectSky_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a2daaa6642a460e0096c735e4b14183a4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectSunLight</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a7ee13d77c952c229e04d67a3b5c6fe8b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetAttributeObjectSunLight_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ac516e539e8493518e74dc44fd51f101c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetCurrentActor</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a84563ac147c55a9bb859a48d2532abe9" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetDayLength</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1af341cec96ec32cb01fd0fb74bc6a1f02" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetGlobalWaterLevel</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a9285b575edb2ae782fe8d2850acbd778" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetMaxRenderCount</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a0b814e2605cdc352178bb931d6721a11" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetMiniSceneGraph</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a0077411cf929bef9c1b94bd53764454e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetNextObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a16a79f61e5e0190660db0c3d3cae2195" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a99e8604323519e8a4d592ebe9e04df70" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObject3</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a38ad755d85cbeb81f249838217603561" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObject4</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a395b7cc09599b5e6aa58a09e20ce6706" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObject5</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a857fc3ac49720731e445fc1abd02ff02" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObject_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aac70e25953f2e7c241c6d187bf71a602" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObjectByViewBox</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ae245bd8fff57227fb666ce8beebf631f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObjectsByScreenRect</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a9d5b4b5bb5318f0ffdc7d689706b3233" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetObjectsBySphere</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ad62187324eb1ba383e020056a1880b16" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetPlayer</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a75e181141320c2e3b5266eb6128c595e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetPlayer_</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a4df92e71448c52569a5e893cace42135" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetPostProcessingScene</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a9553b812f16971812f015062b75bb1cc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetScreenPosFrom3DPoint</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a3764ca0ab09dc2704f1a0a3c9e965cc4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetShadowMethod</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a271496ce45746e28745b3e5da1f31b82" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetTimeOfDay</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a58d7829ebfcd31ae3564777d61fbdaf3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>GetTimeOfDaySTD</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aa29b70db1e83c1f34cf97452526bd45e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsGlobalWaterEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a9bee17d9f4720955e283928bea14d706" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsHeadOnDisplayShown</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1adef5e3f3dad8decafe02ed42e122caeb" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsLightingEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1adf338c7878236492802f7e7bdce7893c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsMiniSceneGraphEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a8810ef3c569758398c3cf549fcdcf3ef" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsModified</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aa4bf2c080fa159d86341204c25e54517" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsPostProcessingEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ae5b780337c7d6947a8c2687296d97889" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsSceneEnabled</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a456b6dff8ecc09fcdfb4a294aef5e944" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>IsScenePaused</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aa23523ad6c65c90784f7dfa739291f67" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>LoadNPCsByRegion</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1af252dbefa4375fc1ae22d218128d8d84" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>MousePick</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1af7224b67adeaff54052e0988d23d26d0" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>OnTerrainChanged</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a89c583df9245763b40fd53b91f68c4a1" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>PauseScene</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ad95921ab2655cd08126271ff86043852" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Play3DSound</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ac489d684374e7cc264b926ea83bf7efc" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>RegisterEvent</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ad3c4766ed4f580910089636977372014" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>RegisterEvent1</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a617474d0ec9bdb3525fbe534bfce9f2c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>Reset</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a41ed3e640e01e86b55b9f06a6b5f1eeb" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SaveAllCharacters</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a4476397568ae4840c9bafda2f3a21e71" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SelectObject</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a8393b329492a0127f651f1e06c7f649a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SelectObject1</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a34ae981a68d9c512558e401d0e5c4415" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetCharacterRegionPath</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a2cb26e779ca0a3390020286a1bcf6b2f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetCharRegionCoordinates</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1acade1878d456476ee47f84b94c208a0e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetCharTextureSize</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a75637a7c72500ca43bc12e8540958857" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetCurrentActor</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1aa3d23bbf1c79044770041e7a6d0094d2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetDayLength</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a9c6ab5c8caf7e570b5039fbf630ed25d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetFog</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1acab3ab6a4b47ffcb068e7c180a6633ca" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetGlobalWater</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a2cbb3dc2a1db7442041203e2e8e5c32a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetMaximumAngle</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a32fd1d9b204730135c9a35eb80bba305" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetMaxRenderCount</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a648b812dfad6a9b48efb9a1908f7a027" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetModified</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1adf5422ad89255d68060d9e466aa57b87" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetShadowMethod</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a761d104c4b8c7154387bf820ac430a29" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetTimeOfDay</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ad99a0d8c87b822a503a09e625557c05c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>SetTimeOfDaySTD</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1ae9bbfa96bb54807bb14d1f0c968ec9ba" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>ShowHeadOnDisplay</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a09b5ba4b88bf19e7ba41943c234a025e" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>TogglePlayer</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a09564da8ebac31e2100798cf08434af2" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>UnregisterAllEvent</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1a5241ecd5ffcc68f3fb4e6bd93922101b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>UnregisterEvent</name></member>
      <member refid="class_para_scripting_1_1_para_scene_1abbd9654a51a90b40e9002220f44e2ac7" prot="public" virt="non-virtual"><scope>ParaScripting::ParaScene</scope><name>UpdateOcean</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
