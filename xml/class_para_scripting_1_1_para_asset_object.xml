<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_para_scripting_1_1_para_asset_object" kind="class" language="C++" prot="public">
    <compoundname>ParaScripting::ParaAssetObject</compoundname>
    <includes refid="_para_scripting_common_8h" local="no">ParaScriptingCommon.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_para_scripting_1_1_para_asset_object_1a07b90aaa25ef2569c0a3966c65d17e4b" prot="public" static="no" mutable="no">
        <type>AssetEntity *</type>
        <definition>AssetEntity* ParaScripting::ParaAssetObject::m_pAsset</definition>
        <argsstring></argsstring>
        <name>m_pAsset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="88" column="1" bodyfile="ParaScriptingCommon.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a15a056425b1ae1e77646a742e9a67646" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ParaScripting::ParaAssetObject::ParaAssetObject</definition>
        <argsstring>()</argsstring>
        <name>ParaAssetObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="90" column="1" bodyfile="ParaScriptingCommon.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a7dda29a9f4704eff20a776906f21617c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ParaScripting::ParaAssetObject::ParaAssetObject</definition>
        <argsstring>(AssetEntity *pEntity)</argsstring>
        <name>ParaAssetObject</name>
        <param>
          <type>AssetEntity *</type>
          <declname>pEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="91" column="1" bodyfile="ParaScriptingCommon.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1abf9261f79b4ab431dde7abfe87382b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssetEntity *</type>
        <definition>AssetEntity* ParaScripting::ParaAssetObject::GetAssetEntity</definition>
        <argsstring>()</argsstring>
        <name>GetAssetEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a7fc2ad69f5c500bdd7374bb8528bac72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TextureEntity *</type>
        <definition>TextureEntity* ParaScripting::ParaAssetObject::GetTextureEntity</definition>
        <argsstring>()</argsstring>
        <name>GetTextureEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a632c8e08c982a287fb4107b76bc5e93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::IsValid</definition>
        <argsstring>()</argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if the object is valid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a6c60228fa4e595bf03dae7b3984f36e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::IsLoaded</definition>
        <argsstring>()</argsstring>
        <name>IsLoaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>most assets are loaded asynchronously. This allows us to check if an asset is loaded. For example, we can <ref refid="class_para_scripting_1_1_para_asset_object_1a8f6a52eb330c67e77dea43cb8fce0cb3" kindref="member">LoadAsset()</ref> for a number of assets that need preloading. and then use a timer to check if they are initialized and remove from the uninialized list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1af66f55eb4d0968ff9a66248de5b7401c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::equals</definition>
        <argsstring>(const ParaAssetObject obj) const</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether the two objects are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a174e1d15233cd4216e7cb85b2f6e3679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::Reload</definition>
        <argsstring>()</argsstring>
        <name>Reload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reload the asset from file. Please note that for scene nodes which are currently using the asset entities, they are not automatically updated. For example, the physics which depends on a mesh entity, will not be automatically updated, once the mesh entity is reloaded. This function is almost solely used for debugging. <simplesect kind="return"><para>: return true if the mesh is updated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a32eb9148d0b9f4278aa36ab371266b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::UnloadAsset</definition>
        <argsstring>()</argsstring>
        <name>UnloadAsset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unload the asset from video and system memory. This is usually used for animated or one time texture entity. Please note, asset is unloaded, but can still be used by other scene objects.The use of an unloaded object will cause the object to be loaded again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a8f6a52eb330c67e77dea43cb8fce0cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::LoadAsset</definition>
        <argsstring>()</argsstring>
        <name>LoadAsset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Preload the asset to video and system memory, even though there is no scene object using the object in the previous frames. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a8d7f69e5c6653bb7b4adcdd390ae8bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::Refresh</definition>
        <argsstring>()</argsstring>
        <name>Refresh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>currently, this function only takes effects on texture entity refresh this entity with a local file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>if NULL or empty, the old file will be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1af16e8a82fa900e745ab738001a027765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::Refresh1</definition>
        <argsstring>(const char *sFilename)</argsstring>
        <name>Refresh1</name>
        <param>
          <type>const char *</type>
          <declname>sFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a5eaad835135e0e1cd57fb7d26e44a579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>call this function to safely release this asset. If there is no further reference to this object, it will actually delete itself (with &quot;delete this&quot;). So never keep a pointer to this class after you have released it. A macro like SAFE_RELEASE() is advised to be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a7b1fc9811ca6cd949bcde234d581161d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetRefCount</definition>
        <argsstring>()</argsstring>
        <name>GetRefCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the reference count </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1aeab0a83994ddcf9c6e046e07cc2cd589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::GarbageCollectMe</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollectMe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if its reference count is zero, unload this asset object. any reference holder of this object can call this function to free its resources, if they believe that it will not be needed for quite some time in future. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a5aba92d270b07b3d0632fa872c025328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaAssetObject::GetKeyName</definition>
        <argsstring>()</argsstring>
        <name>GetKeyName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the key name. this is usually the file name of the entity. return &quot;&quot; if it is not valid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1acb53b8f96b8547226f9cab413a13179f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ParaScripting::ParaAssetObject::GetKeyName_</definition>
        <argsstring>()</argsstring>
        <name>GetKeyName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. Solely used for managed exporting. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1aabf3a1b763333177b9d3ddb7c5dc2af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string ParaScripting::ParaAssetObject::GetFileName</definition>
        <argsstring>()</argsstring>
        <name>GetFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the file name. this is always the file name of the entity. return &quot;&quot; if it is not valid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a9d20f68432ba9a06d1b81ca29a82cf78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ParaScripting::ParaAssetObject::GetFileName_</definition>
        <argsstring>()</argsstring>
        <name>GetFileName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function shall never be called from the scripting interface. Solely used for managed exporting. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a7a02077cd1fa3397a4c910229aa495d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetType</definition>
        <argsstring>()</argsstring>
        <name>GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the asset type: enum AssetType { base=0, texture=1, mesh=2, multianimation=3, spritevertex, font, sound, mdx, parax, database, effectfile, dllplugin, }; <simplesect kind="return"><para>-1 is returned, if the asset is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1ace7a389489c36b40221ad5840c015a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::SetHandle</definition>
        <argsstring>(int nHandle)</argsstring>
        <name>SetHandle</name>
        <param>
          <type>int</type>
          <declname>nHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set an integer handle to this asset. This is usually used by effect file asset. We can later assign mesh&apos;s primary technique handler using this value. please note that handles are not automatically created for most custom asset, one needs to manually create one. call this function multiple times with different handle, will associate the same asset with multiple handles. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO: if nHandle is -1, the system will automatically allocate a free handle for it and returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: handle of this asset after successful set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a418bece8ab286ec35894118f88b4d721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetHandle</definition>
        <argsstring>()</argsstring>
        <name>GetHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the integer handle to this asset. if there are multiple handles, the first (smallest) handle is returned. if handle is not available. it will return -1 (INVALID handle). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a32306654b2dd2b3220a5f1d3bdbfe9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ParaAttributeObject</type>
        <definition>ParaAttributeObject ParaScripting::ParaAssetObject::GetAttributeObject</definition>
        <argsstring>()</argsstring>
        <name>GetAttributeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the attribute object associated with the current asset object, such as getting the poly count, etc </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a4102dc0706ac03b8223394af5538c84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_param_block" kindref="compound">ParaParamBlock</ref></type>
        <definition>ParaParamBlock ParaScripting::ParaAssetObject::GetParamBlock</definition>
        <argsstring>()</argsstring>
        <name>GetParamBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the parameter block. currently only effect and mesh entity file asset has effect param block. Currently the effect parameters can be set via <ref refid="class_para_scripting_1_1_para_param_block" kindref="compound">ParaParamBlock</ref> interface from the scripting interface. we offer three levels of effect parameters: per effect file, per asset file, per mesh object. Effect parameters are also applied in that order. e.g. per effect file affects all object rendering with the effect file; per asset file affects all objects that use the mesh asset file; per mesh object affects only the mesh object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1ae80f96caa03d8c3311373889c2084fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::Begin</definition>
        <argsstring>()</argsstring>
        <name>Begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only applies to effect entity: begin effect </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a45b060df53c509949fc5118bdf797458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::BeginPass</definition>
        <argsstring>(int nPass)</argsstring>
        <name>BeginPass</name>
        <param>
          <type>int</type>
          <declname>nPass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only applies to effect entity: begin effect pass </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a577a6bf53609b63482dcf8011ee90327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::SetTexture</definition>
        <argsstring>(int nIndex, const char *filename)</argsstring>
        <name>SetTexture</name>
        <param>
          <type>int</type>
          <declname>nIndex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only used for effect file asset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>texture stage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>if &quot;&quot;, it will set to NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a2a0f4a68febde6a1e21a230b00a72ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::EndPass</definition>
        <argsstring>()</argsstring>
        <name>EndPass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only applies to effect entity: end effect pass </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a7e4676c59256f86194c65ea115c583ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::End</definition>
        <argsstring>()</argsstring>
        <name>End</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>only applies to effect entity: end effect </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a35feffcd280aeb9fb9eba38ea67f1e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParaScripting::ParaAssetObject::CommitChanges</definition>
        <argsstring>()</argsstring>
        <name>CommitChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this apply to changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a73c3668f4462b0d482dbae6566ca2ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::SetTextureFPS</definition>
        <argsstring>(float FPS)</argsstring>
        <name>SetTextureFPS</name>
        <param>
          <type>float</type>
          <declname>FPS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For animated textures. set the FPS for animation textures. this provides a short cut to animated textures <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nFPS</parametername>
</parameternamelist>
<parameterdescription>
<para>frames per seconds. default value is 15 FPS </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1ae06483b92451d50e9da0d2ae54470403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::EnableTextureAutoAnimation</definition>
        <argsstring>(bool bEnable)</argsstring>
        <name>EnableTextureAutoAnimation</name>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For animated textures. whether to enable texture animation. this provides a short cut to animated textures <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bEnable</parametername>
</parameternamelist>
<parameterdescription>
<para>default value is true. Set this to false, if one wants to manually animate the texture, such as controlling from the scripting interface. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a45922ffba856a89355a4154adf602037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::SetCurrentFrameNumber</definition>
        <argsstring>(int nFrame)</argsstring>
        <name>SetCurrentFrameNumber</name>
        <param>
          <type>int</type>
          <declname>nFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For animated textures. set the current frame number. this provides a short cut to animated textures <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nFrame</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1aca3764a523f4c947c2680dc415c60575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetCurrentFrameNumber</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentFrameNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For animated textures. Get the current frame number. this provides a short cut to animated textures <simplesect kind="return"><para>frame number is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1afa4ff042f973626b7795213a12ba2472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetFrameCount</definition>
        <argsstring>()</argsstring>
        <name>GetFrameCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For animated textures. Get the total frames in the animated texture. this provides a short cut to animated textures <simplesect kind="return"><para>frame number is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a3a0e37a32d93f219d5e3284c0ce9c426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetWidth</definition>
        <argsstring>()</argsstring>
        <name>GetWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the texture width <simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a3656a06331db4af01afeb67a1816e3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetHeight</definition>
        <argsstring>()</argsstring>
        <name>GetHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the texture height <simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1af4796c5fc4826b599f2fffd444723863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParaScripting::ParaAssetObject::SetSize</definition>
        <argsstring>(int nWidth, int nHeight)</argsstring>
        <name>SetSize</name>
        <param>
          <type>int</type>
          <declname>nWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the texture info (size) of the asset </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a313a94f7b12a8950016fb57512b29055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object</type>
        <definition>object ParaScripting::ParaAssetObject::GetBoundingBox</definition>
        <argsstring>(const object &amp;box)</argsstring>
        <name>GetBoundingBox</name>
        <param>
          <type>const object &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the bounding box (AABB) of the mesh or parax entity in object space. This function returns nothing if asset is not mesh or character entity. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>box</parametername>
</parameternamelist>
<parameterdescription>
<para>[in|out] a script table to receive the output. in the format: {min_x, min_y, min_z, max_x, max_y, max_z} </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a8fa601120af9d159116a1f70b34a6d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ParaScripting::ParaAssetObject::GetNumReplaceableTextures</definition>
        <argsstring>()</argsstring>
        <name>GetNumReplaceableTextures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the total number of replaceable textures, which is the largest replaceable texture ID. but it does not mean that all ID contains valid replaceable textures. This function can be used to quickly decide whether the model contains replaceable textures. Generally we allow 32 replaceable textures per model. <simplesect kind="return"><para>0 may be returned if no replaceable texture is used by the model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a17687f1a0eb84243dd4988705a7751d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref></type>
        <definition>ParaAssetObject ParaScripting::ParaAssetObject::GetDefaultReplaceableTexture</definition>
        <argsstring>(int ReplaceableTextureID)</argsstring>
        <name>GetDefaultReplaceableTexture</name>
        <param>
          <type>int</type>
          <declname>ReplaceableTextureID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the default replaceable texture by its ID. The default replaceable texture is the main texture exported from the 3dsmax exporter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ReplaceableTextureID</parametername>
</parameternamelist>
<parameterdescription>
<para>usually [0-32) generally speaking, replaceable ID 0 is used for general purpose replaceable texture, ID 1 is for user defined. ID 2 is for custom skins. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this may return invalid asset, if replaceable texture is not set before or ID is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="310" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a49729a160ec4a384731e40b8c11e1be3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TextureEntity *</type>
        <definition>static TextureEntity* ParaScripting::ParaAssetObject::GetTexture</definition>
        <argsstring>(const object &amp;texture)</argsstring>
        <name>GetTexture</name>
        <param>
          <type>const object &amp;</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>static helper functions: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>it can be string or a <ref refid="class_para_scripting_1_1_para_asset_object" kindref="compound">ParaAssetObject</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_para_scripting_1_1_para_asset_object_1a2964c05ef06ee189f8b9934ecdf5f4e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TextureEntity *</type>
        <definition>static TextureEntity* ParaScripting::ParaAssetObject::GetTextureWithParams</definition>
        <argsstring>(const object &amp;texture)</argsstring>
        <name>GetTextureWithParams</name>
        <param>
          <type>const object &amp;</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ParaScriptingCommon.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>it represents an asset entity. </para>    </detaileddescription>
    <location file="ParaScriptingCommon.h" line="86" column="1" bodyfile="ParaScriptingCommon.h" bodystart="85" bodyend="311"/>
    <listofallmembers>
      <member refid="class_para_scripting_1_1_para_asset_object_1ae80f96caa03d8c3311373889c2084fb8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>Begin</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a45b060df53c509949fc5118bdf797458" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>BeginPass</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a35feffcd280aeb9fb9eba38ea67f1e1c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>CommitChanges</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1ae06483b92451d50e9da0d2ae54470403" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>EnableTextureAutoAnimation</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a7e4676c59256f86194c65ea115c583ef" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>End</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a2a0f4a68febde6a1e21a230b00a72ba5" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>EndPass</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1af66f55eb4d0968ff9a66248de5b7401c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>equals</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1aeab0a83994ddcf9c6e046e07cc2cd589" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GarbageCollectMe</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1abf9261f79b4ab431dde7abfe87382b43" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetAssetEntity</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a32306654b2dd2b3220a5f1d3bdbfe9d1" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetAttributeObject</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a313a94f7b12a8950016fb57512b29055" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetBoundingBox</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1aca3764a523f4c947c2680dc415c60575" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetCurrentFrameNumber</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a17687f1a0eb84243dd4988705a7751d6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetDefaultReplaceableTexture</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1aabf3a1b763333177b9d3ddb7c5dc2af7" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetFileName</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a9d20f68432ba9a06d1b81ca29a82cf78" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetFileName_</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1afa4ff042f973626b7795213a12ba2472" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetFrameCount</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a418bece8ab286ec35894118f88b4d721" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetHandle</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a3656a06331db4af01afeb67a1816e3e8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetHeight</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a5aba92d270b07b3d0632fa872c025328" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetKeyName</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1acb53b8f96b8547226f9cab413a13179f" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetKeyName_</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a8fa601120af9d159116a1f70b34a6d00" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetNumReplaceableTextures</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a4102dc0706ac03b8223394af5538c84a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetParamBlock</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a7b1fc9811ca6cd949bcde234d581161d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetRefCount</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a49729a160ec4a384731e40b8c11e1be3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetTexture</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a7fc2ad69f5c500bdd7374bb8528bac72" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetTextureEntity</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a2964c05ef06ee189f8b9934ecdf5f4e6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetTextureWithParams</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a7a02077cd1fa3397a4c910229aa495d6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetType</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a3a0e37a32d93f219d5e3284c0ce9c426" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>GetWidth</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a6c60228fa4e595bf03dae7b3984f36e4" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>IsLoaded</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a632c8e08c982a287fb4107b76bc5e93d" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>IsValid</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a8f6a52eb330c67e77dea43cb8fce0cb3" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>LoadAsset</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a07b90aaa25ef2569c0a3966c65d17e4b" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>m_pAsset</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a15a056425b1ae1e77646a742e9a67646" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>ParaAssetObject</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a7dda29a9f4704eff20a776906f21617c" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>ParaAssetObject</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a8d7f69e5c6653bb7b4adcdd390ae8bb8" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>Refresh</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1af16e8a82fa900e745ab738001a027765" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>Refresh1</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a5eaad835135e0e1cd57fb7d26e44a579" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>Release</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a174e1d15233cd4216e7cb85b2f6e3679" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>Reload</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a45922ffba856a89355a4154adf602037" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>SetCurrentFrameNumber</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1ace7a389489c36b40221ad5840c015a52" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>SetHandle</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1af4796c5fc4826b599f2fffd444723863" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>SetSize</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a577a6bf53609b63482dcf8011ee90327" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>SetTexture</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a73c3668f4462b0d482dbae6566ca2ff6" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>SetTextureFPS</name></member>
      <member refid="class_para_scripting_1_1_para_asset_object_1a32eb9148d0b9f4278aa36ab371266b2a" prot="public" virt="non-virtual"><scope>ParaScripting::ParaAssetObject</scope><name>UnloadAsset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
